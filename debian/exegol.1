'\" t
.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "EXEGOL" "1" "Dec 26, 2023" "" "Exegol"
.SH NAME
exegol \- Exegol 4.3.1
.sp
Exegol is a community\-driven hacking environment, powerful and yet simple enough to be used by anyone in day to day engagements. Exegol is the best solution to deploy powerful hacking environments securely, easily, professionally. No more unstable, not\-so\-security\-focused systems lacking major offensive tools. Kali Linux (and similar alternatives) are great toolboxes for learners, students and junior pentesters. But professionals have different needs, and their context require a whole new design.
[image: No more kali, parrot, blackarch]
[image]
.sp
Exegol fits pentesters, CTF players, bug bounty hunters, researchers, beginners and advanced users, defenders, from stylish macOS users and corporate Windows pros to UNIX\-like power users.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This documentation is a work in progress. We are actively writing it, but if there are things you’d like to be documented in priority, feel free to request in on the \fI\%GitHub Repo\fP or in the \fI\%Discord server\fP\&.
.UNINDENT
.UNINDENT
.SH THE EXEGOL PROJECT
[image: Structure overview]
[image]
.sp
Exegol is many things in one. Try it, and you’ll stop using your old, unstable and risky environment, no more monolithic system that gets messier, buggier and more at risk with time.
.INDENT 0.0
.IP \(bu 2
\fI\%Python wrapper\fP: makes everyone’s life easier. This entrypoint to the whole Exegol project handles all docker and git operations so you don’t have to. \fBNow’s the time to have a clean environment\fP with one Docker container per engagement without the effort. Exegol handles multiple images and multiple containers. GUI apps, Wi\-Fi, USB accessories, volume mounting and many more features are supported and easier to use than ever.
.IP \(bu 2
\fI\%Docker images\fP: a set of pre\-built docker images and dockerfiles that include a neat choice of tools, zsh plugins for power users, pre\-filled history ready to use with environment variables, awesome resources, custom configs and many more. Images can either be built locally or pulled from the official Dockerhub registry.
.IP \(bu 2
\fI\%Offline resources\fP: Tired of always having to search github for your favorite privesc enumeration script? Exegol includes a set of resources, shared with all exegol containers and your host, including LinPEAS, WinPEAS, LinEnum, PrivescCheck, SysinternalsSuite, mimikatz, Rubeus, PowerSploit and many more.
.UNINDENT
[image: Structure overview]
[image]
.SH GETTING STARTED
.sp
Wanna try Exegol and join our great community? You need to \fI\%install requirements\fP first, then proceed to the OS\-specific instructions: \fI\%Linux\fP | \fI\%macOS\fP | \fI\%Windows\fP
.SH COMMUNITY
.sp
Have a bug report or feature request? Either open an issue on the \fI\%Exegol repo\fP or open a ticket on the \fI\%Exegol discord\fP (preferred, easier, more flexible).
.sp
Wanna chat? Need help? Join us on the \fI\%Exegol discord\fP!
.SS Install Exegol
.sp
Installing Exegol starts with installing the entrypoint to the whole project: the Python wrapper. Once the wrapper is installed, everything else can be managed from it.
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
It is strongly advised to install Exegol on a Linux host, especially when planning on using Exegol for internal penetration tests. This is because Docker Desktop on Windows and macOS lacks a few features, mainly due to how these operating systems run Docker containers within an internal VM that doesn’t share the host’s network interfaces and USB accessories.
.UNINDENT
.UNINDENT
.sp
Once the wrapper is installed, the second step in setting up Exegol on a device is to install at least one Exegol image, either with \fBexegol start\fP (documentation
\fI\%here\fP), or with \fBexegol install\fP (documentation
\fI\%here\fP). Both actions will guide the user in installing an image if needed.
.INDENT 0.0
.IP \(bu 2
\fI\%Requirements\fP
.IP \(bu 2
\fI\%Installation\fP
.INDENT 2.0
.IP \(bu 2
\fI\%1. Installation of exegol\fP
.IP \(bu 2
\fI\%2. Adding Exegol to the PATH\fP
.IP \(bu 2
\fI\%3. (Optional) Using Exegol auto\-completion\fP
.IP \(bu 2
\fI\%4. Installation of the first Exegol image\fP
.UNINDENT
.UNINDENT
.SS Requirements
.sp
The following elements are required before Exegol can be installed, whatever the host’s operating system is:
.INDENT 0.0
.IP \(bu 2
git (\fI\%Linux\fP | \fI\%macOS\fP | \fI\%Windows\fP)
.IP \(bu 2
python3 (\fI\%Linux\fP | \fI\%macOS\fP | \fI\%Windows\fP)
.IP \(bu 2
docker (\fI\%Linux\fP) or Docker Desktop (\fI\%macOS\fP | \fI\%Windows\fP)
.IP \(bu 2
at least 20GB of free storage
.UNINDENT
.sp
Additional dependencies may be required depending on the host OS.
Linux
.sp
macOS
.sp
Windows
No additional dependencies for Linux environments.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
From Linux systems, Docker can be installed quickly and easily with the following command\-line:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
curl \-fsSL \(dqhttps://get.docker.com/\(dq \-o get\-docker.sh
sh get\-docker.sh
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
By default, \fBsudo\fP will be required when running docker, hence needed as well for Exegol. For security reasons, it should stay that way, but it’s possible to change that. In order to run exegol from the user environment without \fBsudo\fP, the user must have the appropriate rights. You can use the following command to grant them to the current user:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# add the sudo group to the user
sudo usermod \-aG docker $(id \-u \-n)

# \(dqreload\(dq the user groups with the newly added docker group
newgrp docker
.EE
.UNINDENT
.UNINDENT
.sp
For more information, official Docker documentation shows \fI\%how to manage docker as a non root user\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fI\%Docker “Rootless mode”\fP is not supported by Exegol as of yet. Please follow the install procedure mentionned above.
.UNINDENT
.UNINDENT
To support graphical applications (\fI\%display sharing functionality\fP, e.g. Bloodhound, Wireshark, Burp, etc.), additional dependencies and configuration are required:
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
The XQuartz requirement below is now optional if using the (beta) \fI\%Graphical Remote Desktop feature\fP instead of X11 sharing (join our Discord to know more about this beta feature).
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fI\%XQuartz\fP must be installed
.IP \(bu 2
The XQuartz config \fBAllow connections from network clients\fP must be set to true
.IP \(bu 2
Docker Desktop must be configured with default File Sharing (see screenshot below)
.UNINDENT
.INDENT 0.0
.INDENT 2.5
[image: macOS XQuartz configuration requirement]
[image]
macOS XQuartz configuration requirement.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 2.5
[image: macOS Docker Desktop resources requirement]
[image]
macOS Docker Desktop resources requirement.UNINDENT
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
\fI\%OrbStack\fP for \fBMac\fP is supported by Exegol wrapper from \fBv4.2.0\fP\&.
.sp
This support is still in beta, feel free to open issues on \fI\%GitHub\fP if you encounter any bugs.
.UNINDENT
.UNINDENT
To support graphical applications (\fI\%display sharing functionality\fP, e.g. Bloodhound, Wireshark, Burp, etc.), additional dependencies and configuration are required:
.INDENT 0.0
.IP \(bu 2
Windows \fB10\fP (up to date), or Windows \fB11\fP, is required
.IP \(bu 2
\fBDocker Desktop\fP installed on the Windows host
.IP \(bu 2
Docker Desktop must be configured to run on \fBWSL2\fP engine (\fI\%how to\fP)
.IP \(bu 2
\fI\%WSLg\fP must be installed to support graphical application
.IP \(bu 2
at least one WSL distribution must be \fBinstalled\fP as well (e.g. Debian), with \fBDocker integration\fP enabled (see screenshot below)
.UNINDENT
.INDENT 0.0
.INDENT 2.5
[image: Windows Docker Desktop WSL integration configuration]
[image]
Windows Docker Desktop WSL integration configuration.UNINDENT
.UNINDENT
.sp
In a Windows environment, the Exegol wrapper can be installed \fBeither\fP in a \fBWSL shell\fP or directly in your Windows environment with \fBPowershell\fP\&.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Please note that it is \fBnot\fP advisable to use Exegol from both environments at the same time, as this could lead to conflicts and Exegol does not officially support this configuration.
.UNINDENT
.UNINDENT
.SS Installation
.sp
The installation of Exegol on Linux, macOS and Windows are very similar. It can either be installed from pip (easiest, most user\-friendly, but with a few missing features) or from sources (easy as well, fully featured).
.SS 1. Installation of exegol
Installing with pip
.sp
Installing from sources
.sp
Installing with pipx
Exegol’s wrapper can be installed from pip.
While this is the easiest and most user\-friendly technique, for more advanced users it is advised to install from sources, as it allows to switch from release to dev branches easily and the auto\-update feature is supported.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
python3 \-m pip install exegol
.EE
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
You may want to disable Windows Defender during the installation, as Exegol will download pre\-built remote shells (or temporarily exclude \fBC:\eUsers\e<username>\eAppData\eLocal\eTemp\fP).
.sp
You should also add the folder \fBC:\eUsers\e<user>\e.exegol\eexegol\-resources\fP to the exclution list.
.UNINDENT
.UNINDENT
Exegol’s wrapper can also be installed from sources (with Git). The wrapper then knows how to self\-update, and switching from release and development branches is possible and very easy.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
git clone \(dqhttps://github.com/ThePorgs/Exegol\(dq
.EE
.UNINDENT
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
If you want a \fBlight\fP clone of Exegol (and \fBnever\fP use the \fBdev\fP branch), you can use the following command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
git clone \-\-shallow\-since=\(dq2023/05/08\(dq \(dqhttps://github.com/ThePorgs/Exegol\(dq
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
If you have access to docker directly as a user, you can install the requirements only for your current user
otherwise the requirements must be installed as root to run Exegol with sudo.
With sudo
.sp
Directly as user
.INDENT 0.0
.INDENT 3.5
.sp
.EX
sudo python3 \-m pip install \-\-requirement \(dqExegol/requirements.txt\(dq
.EE
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
python3 \-m pip install \-\-user \-\-requirement \(dqExegol/requirements.txt\(dq
.EE
.UNINDENT
.UNINDENT
Exegol’s wrapper can also be installed with pipx either from sources or PyPI, which allows to install Exegol in a virtual environment of its own.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# install pipx if not already installed
python3 \-m pip install pipx

# from sources
pipx install git+https://github.com/ThePorgs/Exegol

# packaged from PyPI
pipx install exegol
.EE
.UNINDENT
.UNINDENT
.SS 2. Adding Exegol to the \fBPATH\fP
Installing with pip
.sp
Installing from sources
If your pip installation is correct and functional, you have nothing more to do and you can already use the command \fBexegol\fP\&.
.sp
If not, remember that pip installs binaries in a \fBdedicated\fP local folder, which then \fBmust\fP be in the \fBPATH\fP environment variable.
Try to fix your pip installation: \fI\%Linux\fP | \fI\%MacOS\fP | \fI\%Windows\fP
Linux & MacOS
.sp
Windows
Once this is taken care of, the exegol wrapper can then be added to the \fBPATH\fP with a symlink for direct access. This allows to call exegol from wherever, instead of to use the absolute path. Exegol can then be used with \fBexegol <action>\fP instead of \fBpython3 /path/to/Exegol/exegol.py <action>\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
sudo ln \-s \(dq$(pwd)/Exegol/exegol.py\(dq \(dq/usr/local/bin/exegol\(dq
.EE
.UNINDENT
.UNINDENT
Once this is taken care of, the exegol wrapper can then can be added as a PowerShell command alias. Exegol can then be used with \fBexegol <action>\fP instead of \fBpython3 /path/to/Exegol/exegol.py <action>\fP\&.
.sp
To create the alias file correctly, open a PowerShell and place yourself in the folder where exegol is located (applicable only for \fIfrom source\fP installations) and run the following commands:
.sp
Create \fI$PROFILE\fP file if it doesn’t exist:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
if (!(Test\-Path \-Path $PROFILE)) {
    New\-Item \-ItemType File \-Path $PROFILE \-Force
}
.EE
.UNINDENT
.UNINDENT
.sp
Create alias for Exegol in \fI$PROFILE\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
echo \(dqSet\-Alias \-Name exegol \-Value \(aq$(pwd)\eexegol.py\(aq\(dq >> $PROFILE
.EE
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
To automatically load aliases from the \fB\&.ps1\fP file, PowerShell’s \fBGet\-ExecutionPolicy\fP must be set to \fBRemoteSigned\fP\&.
.sp
If the configuration is not correct it can be configured as \fBadministrator\fP with the following command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
Set\-ExecutionPolicy \-ExecutionPolicy RemoteSigned
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
If you have installed Python3 manually and Windows opens the \fBMicrosoft store\fP on the python page as soon as you type \fBpython3.exe\fP, try this:
.sp
It is possible to disable this behavior in the Windows settings: \fBApps > Apps & features > App execution aliases\fP and disable aliases for \fBpython.exe\fP and \fBpython3.exe\fP\&.
.UNINDENT
.UNINDENT
.SS 3. (Optional) Using Exegol auto\-completion
.sp
Exegol (wrapper) supports auto\-completion in many shell environments but there is a configuration to add (on the host) for this feature to work.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
If you have a source installation, make sure you have installed (or updated) the \fBrequirements.txt\fP packages before using the completer.
.UNINDENT
.UNINDENT
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
The following configurations must be made in your \fBhost\fP environment.
.UNINDENT
.UNINDENT
Bash
.sp
Zsh
.sp
Fish
.sp
Tcsh
.sp
PowerShell
You can enable Exegol auto\-completion for your \fBcurrent user\fP with your \fB\&.bashrc\fP or you can enable the auto\-completion \fBsystem\-wide\fP with \fBbash\-completion\fP\&.
Via bash\-completion
.sp
Via .bashrc
To setup the auto\-completion system\-wide you first need to install \fBbash\-completion\fP on your system (if not already installed).
.INDENT 0.0
.INDENT 3.5
.sp
.EX
sudo apt update && sudo apt install bash\-completion
.EE
.UNINDENT
.UNINDENT
.sp
At this point you should have a \fB/etc/bash_completion.d/\fP folder. It’s in there that you can add any auto\-completion module that you want.
.sp
To generate and install the exegol completion configuration you can execute the following command with \fBregister\-python\-argcomplete\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
register\-python\-argcomplete \-\-no\-defaults exegol | sudo tee /etc/bash_completion.d/exegol > /dev/null
.EE
.UNINDENT
.UNINDENT
Add the following command in your \fB~/.bashrc\fP config:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
eval \(dq$(register\-python\-argcomplete \-\-no\-defaults exegol)\(dq
.EE
.UNINDENT
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
If you have multiple tools using \fBargcomplete\fP you can also use the \fI\%global completion\fP method (need bash >= 4.2).
.UNINDENT
.UNINDENT
To activate completions for zsh you need to have \fBbashcompinit\fP enabled in zsh:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
autoload \-U bashcompinit
bashcompinit
.EE
.UNINDENT
.UNINDENT
.sp
Afterwards you can enable completion by adding the following command in your \fB~/.zshrc\fP config:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
eval \(dq$(register\-python\-argcomplete \-\-no\-defaults exegol)\(dq
.EE
.UNINDENT
.UNINDENT
To activate completions for fish use:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
register\-python\-argcomplete \-\-no\-defaults \-\-shell fish exegol | source
.EE
.UNINDENT
.UNINDENT
.sp
or create new completion file, e.g:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
register\-python\-argcomplete \-\-no\-defaults \-\-shell fish exegol > ~/.config/fish/completions/exegol.fish
.EE
.UNINDENT
.UNINDENT
To activate completions for tcsh use:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
eval \(garegister\-python\-argcomplete \-\-no\-defaults \-\-shell tcsh exegol\(ga
.EE
.UNINDENT
.UNINDENT
To activate completions for PowerShell, first generate completion file :
.INDENT 0.0
.INDENT 3.5
.sp
.EX
register\-python\-argcomplete \-\-no\-defaults \-\-shell powershell exegol > $HOME\eDocuments\eWindowsPowerShell\eexegol_completion.psm1
.EE
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
If the command \fBregister\-python\-argcomplete\fP is not found, that means that python pip script are not in your PATH.
You can ty to fix your pip installation: \fI\%Linux\fP | \fI\%MacOS\fP | \fI\%Windows\fP
Or find the direct Python script path, it might be something like:  \fB$HOME\eAppData\eRoaming\ePython\ePython311\eScripts\eregister\-python\-argcomplete\fP (\fBPython311\fP PATH depends on the version of Python you have installed, it must be updated to match your local setup).
.UNINDENT
.UNINDENT
.sp
Then import this completion file in \fI$PROFILE\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
echo \(dqImport\-Module \(aq$HOME\eDocuments\eWindowsPowerShell\eexegol_completion.psm1\(aq\(dq >> $PROFILE
.EE
.UNINDENT
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
You can have Zsh style completion in PowerShell using this:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
echo \(dqSet\-PSReadlineKeyHandler \-Key Tab \-Function MenuComplete\(dq >> $PROFILE
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS 4. Installation of the first Exegol image
.sp
Once the exegol wrapper is installed, you can download your first docker image with the following command:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
exegol install
.EE
.UNINDENT
.UNINDENT
.SS Updates
.sp
The whole Exegol can be updated through its own wrapper with \fBexegol update\fP (documentation
\fI\%here\fP).
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
Wrappers installed with pip don’t support auto\-update. The wrapper itself can then can be updated as follows.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
python3 \-m pip install \-\-upgrade exegol
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Frequently asked questions
.sp
Below are the frequently asked questions regarding either features, the overall project or troubleshooting matters.
.INDENT 0.0
.IP \(bu 2
\fI\%What tools are installed in Exegol?\fP
.IP \(bu 2
\fI\%Unable to connect to Docker\fP
.IP \(bu 2
\fI\%Can I contribute to the project?\fP
.IP \(bu 2
\fI\%Can I run Exegol on a macOS?\fP
.IP \(bu 2
\fI\%Can I use a VPN with Exegol?\fP
.IP \(bu 2
\fI\%Can I customize Exegol?\fP
.IP \(bu 2
\fI\%Can I make my own Exegol image?\fP
.IP \(bu 2
\fI\%How to install Exegol on an external drive?\fP
.IP \(bu 2
\fI\%How to add a new tool?\fP
.IP \(bu 2
\fI\%How do I get X11 to work on a non\-Linux host?\fP
.IP \(bu 2
\fI\%Can I install docker directly on my WSL2 distro instead of Docker Desktop ?\fP
.UNINDENT
.SS What tools are installed in Exegol?
.sp
The list of tools is dynamically generated for all Exegol images and available \fI\%here\fP\&.
.SS Unable to connect to Docker
.sp
There are multiple checks to do to make sure Docker works properly.
Docker service
.sp
Docker permissions
.sp
Docker socket
.sp
Symbolic link
The Docker service must installed up and running.
.INDENT 0.0
.IP \(bu 2
For Windows users: Docker Desktop for Windows must be up and running.
.IP \(bu 2
For macOS users: Docker Desktop for Mac (or \fI\%OrbStack\fP) must be up and running.
.UNINDENT
Make sure the Docker permissions are consistent with the Exegol permissions. For instance, if you need \fBsudo\fP rights to use Docker, you’ll most likely need \fBsudo\fP to run Exegol smoothly. See \fI\%the Exegol install guidance\fP\&.
The following command can be used to see the docker socket that is used by default: \fBdocker context ls\fP\&.
.INDENT 0.0
.IP \(bu 2
For \fI\%OrbStack\fP users (on macOS), the “orb socket” must be used.
.IP \(bu 2
For Docker Desktop users (macOS/Windows), the “Docker desktop socket” must be used.
.IP \(bu 2
For Linux users, the default socket should work.
.UNINDENT
.sp
Switching context can be done with \fBdocker context use <context>\fP\&.
For instance, switching from a Docker Desktop to OrbStack could be done with \fBdocker context use orbstack\fP\&.
The following symbolic link must exist \fB/var/run/docker.sock\fP and point to the correct socket. Below is an example of what it should look like.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
(Host) ~ $ ls \-la /var/run/docker.sock
lrwxr\-xr\-x  1 root  daemon  38 Jul 28 09:02 /var/run/docker.sock \-> /Users/someuser/.orbstack/run/docker.sock
.EE
.UNINDENT
.UNINDENT
.sp
If the link does not exist, it could be created with the following command \fBln \-sf /Users/someuser/.orbstack/run/docker.sock /var/run/docker.sock\fP\&. This is an example for \fI\%OrbStack\fP\&. The command must be adapted to the user’s context.
.SS Can I contribute to the project?
.sp
Yes, please refer to the \fI\%contributors section\fP\&.
.SS Can I run Exegol on a macOS?
.sp
Yes. And both CPU architectures are supported (Intel X86_64 (AMD64) and Apple Silicon M1/M2 (ARM64).
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
We strongly advised macOS users to replace Docker Desktop with \fI\%OrbStack\fP, allowing host network mode to work for instance, this it’s not supported by Docker Desktop for Mac.
.UNINDENT
.UNINDENT
.SS Can I use a VPN with Exegol?
.sp
Yes. And you have multiple choices.
.INDENT 0.0
.IP \(bu 2
\fBThe “YOLO” choice\fP: at the container creation (i.e. when “starting” a container for the first time), give all permissions to the container so that you’re able to run openvpn in it and start the vpn. The command should look like \fBexegol start <container_name> <image_name> \-\-privileged\fP\&.
.IP \(bu 2
\fBThe better choice\fP: use the \fB\-\-vpn\fP option at the container creation: \fBexegol start <container_name> <image_name> \-\-vpn <myconf.ovpn>\fP\&. It’s the easiest and more secure choice. See the \fBstart\fP help \fI\%here\fP).
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Creating a \fBprivileged\fP container (c.f. the “YOLO” choice) exposes you to higher security risks. This should be avoided.
.UNINDENT
.UNINDENT
.SS Can I customize Exegol?
.sp
Yes, please refer to the \fI\%“my\-resources” documentation\fP that explains how to automatically setup your changes to your Exegol containers.
Also, see the \fI\%“wrapper’s advanced\-uses” documentation\fP to see how to edit Exegol’s conf among other things.
You could also want to \fI\%make your own Exegol image\fP
.SS Can I make my own Exegol image?
.sp
Yes. You will need to create a dockerfile (e.g. \fBCUSTOM.dockerfile\fP) at the root of the exegol\-images module next to the other dockerfiles (i.e. \fB/path/to/Exegol/exegol\-docker\-build/\fP) containing the instructions you want the build process to follow.
.sp
Then, run something like \fBexegol install \(dqmyimagename\(dq \(dqCUSTOM\(dq\fP to build the image locally. See the \fBinstall\fP documentation: \fI\%install action\fP\&.
.SS How to install Exegol on an external drive?
.sp
Exegol’s wrapper is lightweight, but it’s Docker images can take up some space, and users may not have enough room in their internal HDD/SSD, hence the question. This usually comes down to “how can I install Docker on an external drive?”, and the answer depends on the host.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
Use a fast drive, otherwise Exegol will get real slow.
.UNINDENT
.UNINDENT
.sp
For macOS and Windows users, this can be configured in the Docker Desktop dashboard (in \fBSettings > Resources > Advanced > Disk image location\fP).
[image: Disk Image Location Setting (Docker Desktop)]
[image]
.SS How to add a new tool?
.sp
“Adding a tool” can mean many things. Depending on that, you’ll get a different answer. So let’s answer most of them.
.sp
If you want to add a tool:
.INDENT 0.0
.IP \(bu 2
\fBin the official Exegol images\fP: refer to the \fI\%contribution guidance\fP\&.
.IP \(bu 2
\fBin your own custom local image\fP: refer to the \fI\%contribution guidance\fP as well, but instead of creating a Pull Request at the end to offer your contribution, just build the image locally with the wrapper and enjoy your custom local image.
.IP \(bu 2
\fBin a live container\fP: that’s your container, you can do whatever you whish in it ;)
.IP \(bu 2
\fBautomatically in all containers at their creation\fP: refer to the \fI\%“my\-resources” documentation\fP\&.
.UNINDENT
.SS How do I get X11 to work on a non\-Linux host?
.sp
X11, or X Window System, is a graphical windowing system that provides a framework for creating and managing graphical user interfaces (GUIs) in Unix\-like operating systems.
.sp
X11 sharing between an Exegol container and a host allows a graphical application running within the container to display its GUI on the host’s X11 server. This means you can run graphical applications in Exegol containers and have them appear as if they were running directly on the host machine. It enables the execution of GUI\-based applications in isolated containers while interacting with them through the host’s graphical interface.
.sp
For macOS users, XQuartz is needed. It’s listed in the \fI\%install requirements\fP\&.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Exegol’s wrapper automatically starts XQuartz on macOS hosts when needed. But if for some reason it gets manually closed by the users while a container is running, X11 sharing will not work. Restarting the container with \fBexegol restart <container>\fP will restart XQuartz automatically if needed.
.UNINDENT
.UNINDENT
.SS Can I install docker directly on my WSL2 distro instead of Docker Desktop ?
.sp
Yes, it’s possible to install docker directly on WSL2 rather than using Docker Desktop, but you’ll be restricted to your WSL2 environment and its constraints.
.sp
Although Docker Desktop is incomplete, it does offer a few advantages (exegol can be used from powershell / cmd, windows folder sharing with the exegol workstation, etc).
We therefore recommend \fBDocker Desktop as the official support\fP for Exegol.
.sp
We do \fBnot\fP guarantee wrapper stability with a directly installed WSL docker.
.SS Tips & tricks
.sp
Below are some of the tips and tricks that are good to keep in mind when using Exegol.
.INDENT 0.0
.IP \(bu 2
\fI\%Change a container’s time\fP
.IP \(bu 2
\fI\%Share files or notes with targets and collaborators\fP
.IP \(bu 2
\fI\%Dynamic history commands\fP
.IP \(bu 2
\fI\%The best reverse shells\fP
.IP \(bu 2
\fI\%Keyboard shortcuts\fP
.UNINDENT
.SS Change a container’s time
.sp
Changing a container’s time with \fBdate\fP requires elevated permissions on the container, and messes up with the host’s time.
There is however and alternative, using \fBfaketime\fP (see \fI\%faketime ubuntu manpage\fP) that allows to change the time of the container easily, without needing particular permissions, without affecting the host. This is especially useful when working with Kerberos targets that are out of sync.
.sp
Faketime manipulates the system time for a given child command. For example with \fBzsh\fP, a new shell is opened with a spoofed time that will only be spoofed for this extact shell session and commands executed in it.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
faketime \(aqYYYY\-MM\-DD hh:mm:ss\(aq zsh
.EE
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Here is an example of how \fBfaketime\fP can be used.
.sp
When doing Active Directory attacks against Kerberos targets, a clock skew error could be raised such as \fBKRB_AP_ERR_SKEW\fP\&. This means the authenticating machine (operator) and the destination (Key Distribution Center, a.k.a. KDC) are not in sync, clock\-wise.
.sp
Running any \fI\%Impacket\fP with the \fB\-debug\fP flag will print the server time. The operator can then use \fBfaketime\fP to open a new \fBzsh\fP shell with the right time and timezone and conduct the scenario as previously intended.
.sp
The following command can be used to print the time in UTC format and compare it with the server time: \fBdate \-\-utc\fP\&.
.sp
\fINote: careful with the timezones. If they differ between the operator and the KDC, the delta needs to be taken into account\fP
.UNINDENT
.UNINDENT
.SS Share files or notes with targets and collaborators
.sp
The following tools or commands can be used to pop a temporary file or http server: \fBupdog\fP, \fBgoshs\fP, \fBhttp\-server\fP, \fBhttp\-put\-server\fP, \fBftp\-server\fP, \fBsmbserver.py\fP\&.
In order to shares notes during an engagement, \fBtrilium\fP (\fI\%https://github.com/zadam/trilium\fP) can be used.
.SS Dynamic history commands
.sp
Many commands in the pre\-filled history rely on environment variables such as \fB$DOMAIN\fP, \fB$USER\fP, \fB$PASSWORD\fP, etc.
Those variables can be set manually or by using the \fBprofile.sh\fP file in \fB/opt/tools/Exegol\-history/\fP\&.
The proper lines can be filled and uncommented, and then the shell can be reloaded with \fBexec zsh\fP in order to apply the changes.
This allows users to easily look for, and use, commands in the history, without changing the values every time.
.SS The best reverse shells
.INDENT 0.0
.IP \(bu 2
\fBshellerator\fP can be used to generate a reverse shell command dynmically
.IP \(bu 2
on the attacker’s side, a reverse shell obtained through a \fBnetcat\fP tunnel can be improved (see \fI\%ropnop.com\fP or \fI\%0xffsec.com\fP)
.IP \(bu 2
simple alternative way to have an upgrade netcat reverse shell: use \fBrlwrap <netcat listener command>\fP
.IP \(bu 2
instead of using \fBnetcat\fP and “upgrade” the shell manually, \fBpwncat\-cs\fP (\fI\%calebstewart/pwncat\fP) can be used to obtain an even better reverse shell experience (especially with UNIX\-like targets).
.UNINDENT
.SS Keyboard shortcuts
.INDENT 0.0
.IP \(bu 2
\fBctrl+q\fP: when writing a command, let’s say a user misses an information (e.g. IP address). The shortcut can be used to save the half\-typed command, look for the value, and then finish the command. The user doesn’t have to cancel the command, look for the info, and write the command all over again. This is known as the \fBpush\-line\fP feature (see \fI\%sgeb.io\fP).
.IP \(bu 2
\fBctrl + r\fP: look for something in the history
.IP \(bu 2
\fBctrl + t\fP: look for a file or directory with a fuzzy finder
.IP \(bu 2
\fBctrl + a\fP: move to the beginning of the line
.IP \(bu 2
\fBctrl + e\fP: move to the end of the line
.IP \(bu 2
\fBctrl + ←\fP: move one word backward
.IP \(bu 2
\fBctrl + →\fP: move one word forward
.IP \(bu 2
\fBctrl + l\fP: clear the screen
.UNINDENT
.SS Python Wrapper
.sp
The Exegol project regroups many things (docker images, offline resources, custom configurations, aliases, history commands, multi\-architecture support and many others). In order to make all the tech involved easy to use, and provide some unique entrypoint to the whole setup, a Python wrapper was created.
.sp
The Python wrapper handles all Docker and Git operations, can manage multiple images and containers at once and give the user the best experience possible, suited for beginners as well as advanced people.
.sp
The wrapper knows multiple actions.
.INDENT 0.0
.IP \(bu 2
Install an image : \fBexegol install\fP
.IP \(bu 2
Create/start/enter a container : \fBexegol start\fP
.IP \(bu 2
Show info on containers and images : \fBexegol info\fP
.IP \(bu 2
Stop a container : \fBexegol stop\fP
.IP \(bu 2
Remove a container : \fBexegol remove\fP
.IP \(bu 2
Uninstall an image : \fBexegol uninstall\fP
.IP \(bu 2
Get help and advanced usage : \fBexegol \-\-help\fP
.IP \(bu 2
Help and examples can be obtained for each action directly from the wrapper with the following command: \fBexegol <action> \-h\fP (action: \fBinstall\fP/\fBstart\fP/\fBstop\fP/etc.).
.UNINDENT
.sp
All actions are documented in the \fBexegol\-wrapper\fP part of this doc (e.g. \fI\%info\fP, \fI\%start\fP, \fI\%version\fP, …)
.sp
Below is a, non\-exhaustive, list of what the wrapper supports:
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Exegol uses Docker images and containers. Understanding the difference is essential to understand Exegol.
.INDENT 0.0
.IP \(bu 2
\fBimage\fP: think of it as an immutable template. They cannot be executed as\-is and serve as input for containers. It’s not possible to open a shell in an image.
.IP \(bu 2
\fBcontainer\fP: a container rests upon an image. A container is created for a certain image at a certain time. It’s possible to open a shell in a container. Careful though, once a container is created, updating the image it was created upon won’t have any impact on the container. In order to enjoy the new things, a new container must be created upon that updated image.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Features
.sp
The Exegol wrapper has many features to automatically and transparently manage different configurations to facilitate the use and creation of docker containers.
.SS X11 sharing (GUI)
.sp
By default exegol configures the new container and host to allow the execution to the display of graphical window launched from an exegol container. This is achieved through X11 sharing.
.sp
For example, if bloodhound is launched in an exegol container, the graphical window (GUI) will be displayed in the user’s graphic environment.
.sp
This feature can be disabled manually with the option \fB\-\-disable\-X11\fP of the \fI\%start action\fP\&.
.SS Desktop
.sp
On some systems, it may be difficult to have or share an X11 environment. Some users prefer to have a full graphical desktop environment rather than just graphical applications.
.sp
To meet this need, Exegol is able to host a complete graphical environment within its container since version \fB4.3.0\fP of the wrapper and \fB3.1.2\fP of the images.
.sp
This environment can then be made available to others in a variety of ways. The default protocol is currently \fBHTTP\fP, but the user can change the configuration to use the \fBVNC\fP alternative.
.sp
This feature can be enabled manually with the option \fB\-\-desktop\fP of the \fI\%start action\fP\&.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
The default behavior and configuration of the desktop mode can be changed in the \fI\%configuration of Exegol\fP\&.
.UNINDENT
.UNINDENT
.SS Workspace
.sp
Exegol always creates within a container a \fBpersistent\fP workspace (even after deleting the container) and \fBshared\fP with the host.
.sp
By default a folder will be created on the host and shared with the container. This folder will be created in \fB~/.exegol/workspaces/\fP with the name of the exegol container.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
The default location of workspace volumes can be changed in the \fI\%configuration of Exegol\fP\&.
.UNINDENT
.UNINDENT
.sp
The user can also create an Exegol container with an \fBexisting custom workspace folder\fP (with already existing data) regardless of its location in the file system.
.sp
See the options \fB\-w WORKSPACE_PATH\fP and \fB\-cwd\fP of the \fI\%start action\fP for more details.
.SS Update\-fs
.sp
The root user is used by default in Exegol containers which poses problems of permissions when accessing the project documents from the host.
To remedy this without compromising, a \fBshared permission system\fP exists allowing the host user to have read and write access to files created from the container.
.sp
This system is \fBautomatically activated\fP when a \fBnew\fP default workspace is created.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
When the user uses an existing custom folder as workspace, this system is \fBdisabled\fP by default! This feature can be \fBenabled by default\fP by changing the \fI\%configuration of Exegol\fP\&.
.sp
Its activation is possible manually (see the option \fB\-\-update\-fs\fP of the \fI\%start action\fP) but it will lead to the \fBmodification\fP of the folder and its sub\-folders \fBpermissions\fP (as \fBg+rws\fP).
.sp
If the user does not have the rights to perform such an operation, a \fBsudo command\fP will be proposed to the user that he will have to \fBexecute manually\fP to apply the necessary permissions for the proper functioning of the functionality (as \fBchgrp\fP + \fBg+rws\fP).
.UNINDENT
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
When the default configuration of this feature is changed and the update will be \fBenabled by default\fP, the option \fB\-\-update\-fs\fP can still be used to manually \fBdisable\fP the feature in specific cases.
.UNINDENT
.UNINDENT
.SS OpenVPN connection
.sp
Exegol supports OpenVPN tunnel configuration to \fBautomatically\fP establish a VPN tunnel at container \fBstartup\fP\&.
.sp
Exegol supports certificate authentication (all files should preferably be included in a single ovpn file) but also user/password authentication through an authentication file (to allow non\-interactive and transparent authentication).
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
A folder can also be used in the case of a \fBmulti\-file configuration\fP (with \fBrelative\fP paths!) and the configuration file must have the \fB\&.ovpn\fP extension (Only \fBone\fP .ovpn file will be loaded by exegol).
.UNINDENT
.UNINDENT
.sp
See the options \fB\-\-vpn VPN\fP and \fB\-\-vpn\-auth VPN_AUTH\fP of the \fI\%start action\fP for more details.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
In case of problem, to troubleshoot a VPN connection, the log of OpenVPN can be retrieved within the container in the \fB/var/log/exegol/vpn.log\fP file
.UNINDENT
.UNINDENT
.SS Shell logging
.sp
Within the framework of a mission, it is necessary to \fBlog all actions\fP performed during a pentest, red team etc.
To meet this need, Exegol has a feature to \fBautomatically record everything\fP that is displayed (stdout / stderr) but also all entries (stdin).
.sp
See the option \fB\-\-log\fP of the \fI\%start action\fP to enable the feature.
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
When the option is enabled upon \fBcreation\fP of a new container, all shells created for this container \fBwill be automatically logged\fP\&.
.sp
If the container was created \fBwithout\fP this option, the shells can still be logged \fBindividually\fP by adding the option in the \fBstart\fP command of \fBeach\fP shell.
.UNINDENT
.UNINDENT
.sp
The date and time of each command is displayed thanks to the PS1 of \fBzsh\fP\&.
.sp
The logs are automatically saved in the \fB/workspace/logs\fP folder. Each log file is \fBautomatically compressed\fP with \fBgzip\fP at the end of the session to optimize disk space.
The automatic compression of log files can be \fBdisabled\fP manually with the \fI\%start action\fP \fB\-\-log\-compress\fP parameter or change the default behavior in the \fI\%Exegol configuration file\fP\&.
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
When the default configuration of the log compression is changed from the config file and the feature will be \fBdisabled by default\fP, the option \fB\-\-log\-compress\fP can still be used to manually \fBenable\fP the feature in specific cases.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The logs should \fBNOT\fP be consulted from the exegol container but \fBfrom the host\fP to avoid loops and duplication of data in the logs.
.UNINDENT
.UNINDENT
.sp
There are (since exegol images version \fB3.0.0\fP) different methods of shell logging.
The shell logging method can be selected manually with the \fI\%start action\fP \fB\-\-log\-method\fP parameter or by default in the \fI\%configuration file of Exegol\fP\&.
asciinema (default)
.sp
script
The shell logging method \fBasciinema\fP is available from exegol images version \fB3.0.0\fP\&.
This new mode allows to consult sessions in \fBvideo\fP format taking into account the interactive environment.
It is also possible to \fBmanually upload\fP and \fBshare\fP recordings, useful for \fBdemonstrations\fP for example
.sp
Here is a quick demonstration:
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
Logs in \fB\&.gz\fP format can be replay directly \fBwithout unpacking\fP them with the command: \fBgunzip \-c <filename_shell.asciinema.gz> | asciinema play \-\fP
.UNINDENT
.UNINDENT
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
To display the whole session \fBwithout\fP the “video” mode, it is possible to use the command: \fBasciinema cat <filename_shell.asciinema>\fP
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Major disadvantage of this method, to view the logs from your host, you must \fBinstall\fP \fBasciinema\fP on your \fBhost\fP machine to replay or share your records.
.UNINDENT
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
When you share or play an \fBasciinema\fP video, you can \fBcopy\fP and \fBpaste\fP any command/text it contains.
.UNINDENT
.UNINDENT
\fBscript\fP is the “classic” method of session logging, it was also the only option available before version \fB3.0.0\fP of exegol images.
This method simply records \fBall\fP incoming (stdin) and outgoing (stdout/stderr) shell actions in a file.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
Logs in \fB\&.gz\fP format can be viewed directly \fBwithout unpacking\fP them with the \fBzcat\fP, \fBzgrep\fP, \fBzdiff\fP or \fBzmore\fP command!
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Shell logging saves \fBEVERYTHING\fP including keyboard shortcuts, display refreshes, etc.
.sp
Complex graphical environments (such as tmux) can make it difficult to read the logs.
.UNINDENT
.UNINDENT
.SS Shared network
.sp
By default, containers created by Exegol are in \fBhost\fP mode which means that the \fBnetwork interfaces\fP of the host are \fBshared\fP with the container.
.sp
This configuration is useful to:
.INDENT 0.0
.IP \(bu 2
dynamically open ports and services
.IP \(bu 2
have a low level access on a physical network (some operation might need privileged mode)
.IP \(bu 2
share a unique ip address on the target network
.IP \(bu 2
share a MAC address on the target network (to be considered as a single physical machine)
.UNINDENT
.sp
This mode can be disabled with the option \fB\-\-disable\-shared\-network\fP of the \fI\%start action\fP to create a dedicated and isolated network instead.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
When host network sharing is disabled, ports can be  to expose services on the host machine’s networks.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This mode is only available on \fBLinux\fP installations!
Windows and MacOS installations are subject to the constraints and limitations of \fI\%Docker Desktop\fP .
.sp
You can still use the port \fI\%publishing feature\fP instead.
.UNINDENT
.UNINDENT
.SS Shared timezones
.sp
For convenience and precision in the date and time of the logs of each command, exegol allows to share the timezone of the host in the container.
.sp
This feature is active by default and can be disabled with the option \fB\-\-disable\-shared\-timezones\fP of the \fI\%start action\fP\&.
.SS Exegol\-resources
.sp
To save time and have at hand many tools, scripts and other resources, exegol maintains a repository \fI\%exegol\-resources\fP contains many updated tools that are available to the host and exegol containers.
.sp
This module is not mandatory and can be downloaded later.
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
If an antivirus is present on your host, be careful to exclude the destination folder of the \fBexegol\-resources\fP module before downloading it.
.UNINDENT
.UNINDENT
.sp
This feature is active and shared by default and can be disabled with the option \fB\-\-disable\-exegol\-resources\fP of the \fI\%start action\fP\&.
.SS My\-resources
.sp
The my\-resources feature is a space dedicated to the user and shared with all the containers. This space allows to store configurations and to install personal tools.
.sp
More details on the functionality of the wrapper \fI\%here\fP and how to take advantage of the customization system \fI\%here\fP\&.
.SS Volume sharing
.sp
For specific needs, the exegol wrapper allows to add additional custom volumes (type bind mounts) when creating an exegol container.
.sp
See the option \fB\-\-volume VOLUMES\fP of the \fI\%action start\fP for more details.
.SS Port sharing
.sp
When the host network is not shared, it is still possible to \fBpublish\fP specific ports to expose \fBservices\fP or \fBport\fP ranges.
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
This configuration is \fBcompatible\fP even with installations based on Docker Desktop.
.UNINDENT
.UNINDENT
.sp
This feature allows the user to select:
.INDENT 0.0
.IP \(bu 2
a specific network interface (for example 127.0.0.1) or by default all interfaces (0.0.0.0).
.IP \(bu 2
the port to open on the host interface.
.IP \(bu 2
the destination port to be linked in the container.
.IP \(bu 2
the protocol to use, docker supports \fBTCP\fP, \fBUDP\fP and \fBSCTP\fP protocols (default is TCP).
.UNINDENT
.sp
See the option \fB\-\-port PORTS\fP of the \fI\%start action\fP for more details.
.SS Env. variables
.sp
Exegol can configure custom environment variables defined by the user.
.sp
When the environment variables are defined at the first time of the container creation, these variables will be:
.INDENT 0.0
.IP \(bu 2
accessible in the container by all processes
.IP \(bu 2
present during the whole lifetime of the container
.UNINDENT
.sp
The environment variables can be defined when opening a shell in an \fBexisting\fP container and will be available \fBonly\fP in the user’s shell until it is closed.
.sp
See the option \fB\-\-env ENVS\fP of the \fI\%start action\fP for more details.
.SS Device sharing
.sp
For the needs of some applications running on physical hardware (such as proxmark3), exegol can supply the container with one or more physical devices.
.sp
See the option \fB\-\-device DEVICES\fP of the \fI\%start action\fP for more details.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This feature is only available on \fBLinux\fP installations!
.sp
Windows and MacOS installations are subject to the constraints and limitations of \fI\%Docker Desktop\fP\&.
.UNINDENT
.UNINDENT
.SS Custom hostname
.sp
In some environments with OPSEC requirements, it may be necessary to change the hostname of your exegol container.
.sp
See the option \fB\-\-hostname HOSTNAME\fP of the \fI\%start action\fP for more details.
.SS Comments
.sp
To add more context information about an exegol container, it is possible to add \fBcomments\fP to each Exegol container.
The comment of an exegol container can be displayed with the command \fBexegol info <container_name>\fP
.sp
See the option \fB\-\-comment COMMENT\fP of the \fI\%start action\fP for more details.
.SS Capabilities
.sp
Exegol supports adding \fBLinux capabilities\fP to the Exegol \fBcontainer\fP to perform tasks that require \fBadministrative\fP rights \fBwithout\fP allowing everything.
.sp
This feature gives control to the user to configure his container but giving administrator rights remains a dangerous practice and should be used by experienced users only.
.sp
For more details on the capabilities supported by docker \fI\%check here\fP\&.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Not all Linux capabilities are allowed by the Exegol wrapper, here is the list of available capabilities:
.sp
NET_ADMIN, NET_BROADCAST, SYS_MODULE, SYS_PTRACE, SYS_RAWIO, SYS_ADMIN, LINUX_IMMUTABLE, MAC_ADMIN, SYSLOG
.sp
For all other needs, consider the \fI\%privileged\fP mode.
.UNINDENT
.UNINDENT
.SS Privileged
.sp
For particular needs, it is sometimes necessary to have \fBprivileged rights\fP to perform certain actions.
If Exegol does \fBnot\fP allow you to have specifically the rights necessary, you can configure your container in privileged mode to get \fBfull administrator rights\fP\&.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This configuration is particularly \fBdangerous\fP because it gives the container \fBfull admin control\fP over the \fBkernel\fP of the \fBhost\fP machine.
.sp
Use this option \fBonly\fP if you know \fBexactly\fP what you are doing!!
.sp
If the need is specifically identified, consider adding \fI\%capabilities\fP instead!
.UNINDENT
.UNINDENT
.sp
See the option \fB\-\-privileged\fP of the \fI\%start action\fP for more details.
.SS Multi\-architecture
.sp
Exegol supports \fBARM64\fP architecture (in addition to the classic \fBAMD64\fP) since version \fB4.1.0\fP of the wrapper and \fB3.0.0\fP of the images.
.sp
This support allows you to fully use exegol on hardware equipped with an \fBARM\fP processor (such as Mac M1 / M2 but also some Raspberry Pi).
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Exegol only supports \fB64\-bit ARM\fP architecture! If your ARM processor supports 64\-bit, make sure your \fBOS\fP is also installed in \fB64\-bit version\fP to use exegol!
.UNINDENT
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
For experienced users or developers, it is possible to explicitly modify the architecture used by the Exegol wrapper with the \fI\%general option\fP \fB\-\-arch ARCH\fP\&.
.sp
But be \fBcareful\fP, the modification of this parameter can lead to \fBmalfunctions\fP!
.UNINDENT
.UNINDENT
.SS Local image building
.sp
The wrapper allows users to locally build their images from the \fBexegol\-images\fP sources.
.sp
More information in the \fI\%advanced uses\fP section.
.SS Remote image pulling
.sp
To save time, pre\-built images are available for download from DockerHub.
These images can be downloaded and installed / updated from the exegol wrapper with the \fI\%install\fP and \fI\%update\fP actions.
.SS Command execution
.sp
The Exegol wrapper does not only allow the opening of interactive shells, it is also possible to execute \fBsingle commands\fP in several ways.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
To see the execution logs of the command, the user must add the parameter \fB\-v\fP\&.
.UNINDENT
.UNINDENT
.sp
The details of this functionality are detailed in the \fI\%exec\fP action.
.SS Daemon execution
.sp
One of the execution modes can be in the \fBbackground\fP like a daemon service.
In this way the wrapper executes the \fBuser’s command\fP, for example an application such as bloodhound.
The wrapper \fBlaunches\fP the task in an exegol container and \fBfinishes immediately\fP without occupying the user’s terminal, leaving the application \fBopen\fP\&.
.sp
See the option \fB\-\-background\fP of the \fI\%exec action\fP for more details.
.SS Temporary containers
.sp
Another feature of the \fI\%exec\fP action is the execution in a \fBtemporary\fP container.
.sp
In this mode, a \fBtemporary\fP container will be created and \fBdedicated\fP to the execution of the command specified by the user.
.sp
This mode can be useful to run a given command with the most \fBup\-to\-date\fP image already installed on the host, for any \fBtest\fP or for special \fBprivacy\fP needs.
.sp
See the option \fB\-\-tmp\fP of the \fI\%exec action\fP for more details.
.SS Docker images
.sp
The Docker images are the heart of the Exegol project. A neat choice of tools, configurations, aliases, history commands, and various customizations are prepared in multiple images adapted for multiple uses: web hacking, Active Directory, OSINT (Open Source INTelligence), etc.
.sp
All images are available on \fI\%the official Dockerhub registry\fP\&. This allows to offer pre\-built, compressed images, so that users don’t have to build their own image, but users that choose to do so can. Pulling pre\-built images, or building one, can be done with \fBexegol install\fP (documentation
\fI\%here\fP).
.TS
center;
|l|l|.
_
T{
Image name
T}	T{
Description
T}
_
T{
full
T}	T{
Includes all the tools supported by Exegol (warning: this is the heaviest image)
T}
_
T{
ad
T}	T{
Includes tools for Active Directory / internal pentesting only.
T}
_
T{
web
T}	T{
Includes tools for Web pentesting only.
T}
_
T{
light
T}	T{
Includes the lightest and most used tools for various purposes.
T}
_
T{
osint
T}	T{
Includes tools for OSINT.
T}
_
T{
nightly
T}	T{
\fB(for developers and advanced users)\fP contains the latest updates. This image can be \fBunstable\fP!
T}
_
.TE
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Exegol uses Docker images and containers. Understanding the difference is essential to understand Exegol.
.INDENT 0.0
.IP \(bu 2
\fBimage\fP: think of it as an immutable template. They cannot be executed as\-is and serve as input for containers. It’s not possible to open a shell in an image.
.IP \(bu 2
\fBcontainer\fP: a container rests upon an image. A container is created for a certain image at a certain time. It’s possible to open a shell in a container. Careful though, once a container is created, updating the image it was created upon won’t have any impact on the container. In order to enjoy the new things, a new container must be created upon that updated image.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Offline resources
.sp
Exegol’s “offline resources” are a neat choice of standalone tools and scripts that are often used during penetration tests,
CTFs and red\-teams, like LinPEAS, WinPEAS, LinEnum, PrivescCheck, SysinternalsSuite, mimikatz, Rubeus, PowerSploit and many more.
Exegol users don’t have to download those resources again every time they’re needed anymore.
Everything is managed by the wrapper and they are shared with every container (at \fB/opt/resources\fP).
.SS \fBinstall\fP action
.sp
This action can be used to install an Exegol image. At least one Exegol image is required to create and start a container and enjoy Exegol.
.sp
When this action is used, the image can either be:
.INDENT 0.0
.IP \(bu 2
\fBdownloaded\fP (i.e. “pulled” in Docker terms) from \fI\%the official Dockerhub registry\fP\&. In this case, a compressed and pre\-built image is downloaded in the form of layers, and then uncompressed.
.IP \(bu 2
\fBbuilt\fP locally by following the instructions of a Dockerfile offered on \fI\%the Exegol\-images GitHub repo\fP\&. Here again, no need to download the dockerfile manually, all of them are already at \fB/path/to/Exegol/exegol\-docker\-build/\fP\&.
.UNINDENT
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
The \fBinstall\fP action can be used without any particular argument or option. the wrapper will then enter in an interactive TUI (Text\-based User Interface) mode where the user will be asked to choose what image to install or build.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
exegol install
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Options
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fBIMAGE\fP
T}	T{
Optional positional argument to indicate the image to install (if downloading), or the name of the image to build (if building locally).
T}
_
T{
\fBBUILD_PROFILE\fP
T}	T{
Optional positional argument to indicate the source profile to use if building locally.
T}
_
T{
\fB\-\-build\-log\fP
T}	T{
Write logs to the path specified if building locally.
T}
_
T{
\fB\-\-build\-path\fP
T}	T{
Custom path to the dockerfiles and sources.
T}
_
.TE
.SS Command examples
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#Install or build interactively an exegol image
exegol install

#Install or update the full image
exegol install full

#Build interactively a local image named myimage
exegol install myimage

#Build the myimage image based on the full profile and log the operation
exegol install myimage full \-\-build\-log \(dq/tmp/build.log\(dq
.EE
.UNINDENT
.UNINDENT
.SS \fBstart\fP action
.sp
This action can be used to start a container. At least one Exegol image is required to create and start a container and enjoy Exegol. Installing an image can be done with \fBexegol install\fP (documentation
\fI\%here\fP).
.sp
When this action is used, the following process is applied:
.INDENT 0.0
.IP \(bu 2
if no Exegol image is installed, the user is asked to specify which one to install of build, and the process continues
.IP \(bu 2
then, if the container to start doesn’t already exist, it is created based on an Exegol image and a few settings to specify, and the process continues
.IP \(bu 2
then, the container is started and a shell is opened
.UNINDENT
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
The \fBstart\fP action can be used without any additional argument or option. the wrapper will then enter in an interactive TUI (Text\-based User Interface) mode where the user will be asked to choose a few settings.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
exegol start
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Options
.sp
A single option exist to target an Exegol container.
If this container exists, it will be started if it is not already the case and a shell will be spawned to offer an interactive console to the user
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fBCONTAINER\fP
T}	T{
Tag used to target an Exegol container
T}
_
.TE
.sp
Many options exist to customize the creation of exegol container.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
The default options of some commands can be changed in the \fI\%exegol configuration file\fP\&.
.UNINDENT
.UNINDENT
.SS Global options
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fBIMAGE\fP
T}	T{
Tag of the exegol image to use to create a new exegol container
T}
_
T{
\fB\-w WORKSPACE_PATH\fP, \fB\-\-workspace WORKSPACE_PATH\fP
T}	T{
The specified host folder will be linked to the /workspace folder in the container.
T}
_
T{
\fB\-cwd\fP, \fB\-\-cwd\-mount\fP
T}	T{
This option is a shortcut to set the /workspace folder to the user’s current working directory (pwd).
T}
_
T{
\fB\-fs\fP, \fB\-\-update\-fs\fP
T}	T{
Modifies the permissions of folders and sub\-folders shared in your workspace to access the files created within the container using your host user account. (default: Disabled)
T}
_
T{
\fB\-V VOLUMES\fP, \fB\-\-volume VOLUMES\fP
T}	T{
Share a new volume between host and exegol (format: –volume /path/on/host/:/path/in/container/[:ro|rw]).
T}
_
T{
\fB\-p PORTS\fP, \fB\-\-port PORTS\fP
T}	T{
Share a network port between host and exegol (format: –port [<host_ipv4>:]<host_port>[:<container_port>][:<protocol>]. This configuration will disable the shared network with the host.
T}
_
T{
\fB\-\-hostname HOSTNAME\fP
T}	T{
Set a custom hostname to the exegol container (default: exegol\-<name>)
T}
_
T{
\fB\-\-cap CAPABILITIES\fP
T}	T{
\fB(dangerous)\fP Capabilities allow to add specific privileges to the container (e.g. need to mount volumes, perform low\-level operations on the network, etc).
T}
_
T{
\fB\-\-privileged\fP
T}	T{
\fB(dangerous)\fP give extended privileges at the container creation (e.g. needed to mount things, to use wifi or bluetooth)
T}
_
T{
\fB\-d DEVICES\fP, \fB\-\-device DEVICES\fP
T}	T{
Add host device(s) at the container creation (example: \-d /dev/ttyACM0 \-d /dev/bus/usb/).
T}
_
T{
\fB\-\-disable\-X11\fP
T}	T{
Disable X11 sharing to run GUI\-based applications. (default: Enabled)
T}
_
T{
\fB\-\-disable\-my\-resources\fP
T}	T{
Disable the mount of the shared resources (/opt/my\-resources) from the host (/home/dramelac/.exegol/my\-resources) (default: Enabled)
T}
_
T{
\fB\-\-disable\-exegol\-resources\fP
T}	T{
Disable the mount of the exegol resources (/opt/resources) from the host (/home/dramelac/Documents/tools/Exegol/exegol\-resources) (default: Enabled)
T}
_
T{
\fB\-\-disable\-shared\-network\fP
T}	T{
Disable the sharing of the host’s network interfaces with exegol (default: Enabled)
T}
_
T{
\fB\-\-disable\-shared\-timezones\fP
T}	T{
Disable the sharing of the host’s time and timezone configuration with exegol (default: Enabled)
T}
_
.TE
.SS Virtual desktop
.sp
In addition to the X11 sharing functionality, Exegol can generate its own graphical environment and make it available to the user in a variety of ways.
By default, a web interface gives users access to their own containerized graphical desktop.
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fB\-\-desktop\fP
T}	T{
Enable or disable the Exegol desktop feature (default: Disabled)
T}
_
T{
\fB\-\-desktop\-config\fP
T}	T{
Configure your exegol desktop (vnc or http) and its exposure (format: proto[:ip[:port]]) (default: \fI\%http:127.0.0.1\fP:<random>)
T}
_
.TE
.SS VPN
.sp
An additional feature of Exegol is the VPN tunnel option (OpenVPN).
Just provide an ovpn configuration to exegol and the container will take care of starting the tunnel at each startup.
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fB\-\-vpn VPN\fP
T}	T{
Setup an OpenVPN connection at the container creation (example: –vpn /home/user/vpn/conf.ovpn)
T}
_
T{
\fB\-\-vpn\-auth VPN_AUTH\fP
T}	T{
Enter the credentials with a file (first line: username, second line: password) to establish the VPN connection automatically (example: –vpn\-auth /home/user/vpn/auth.txt)
T}
_
.TE
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
All the options seen previously are taken into account \fBonly\fP for the creation of a \fBnew container\fP\&.
It is \fBnot possible\fP to modify the configuration of an existing container.
These options will be \fBignored\fP if a container with the same name already exists.
.UNINDENT
.UNINDENT
.SS Shell logging
.sp
One of the functions of exegol very useful in a professional context is the shell logging.
This feature allows the user to record \fBeverything\fP that happens in the exegol container (commands typed and responses).
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fB\-l\fP, \fB\-\-log\fP
T}	T{
Enable shell logging (commands and outputs) on exegol to /workspace/logs/ (default: Disabled)
T}
_
T{
\fB\-\-log\-method\fP
T}	T{
Select a shell logging method used to record the session (default: \fBasciinema\fP)
T}
_
T{
\fB\-\-log\-compress\fP
T}	T{
Enable or disable the automatic compression of log files at the end of the session (default: Enabled)
T}
_
.TE
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
When the \fB\-l\fP/\fB\-\-log\fP option is enabled during the \fBcreation\fP of a \fBnew\fP container, all future shells will be \fBautomatically logged\fP for this container.
.UNINDENT
.UNINDENT
.SS Session specific
.sp
The options specific to the start of the interactive session
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fB\-e ENVS\fP, \fB\-\-env ENVS\fP
T}	T{
And an environment variable on Exegol (format: –env KEY=value). The variables configured during the creation of the container will be persistent in all shells. If the container already exists, the variable will be present only in the current shell.
T}
_
T{
\fB\-s SHELL\fP, \fB\-\-shell SHELL\fP
T}	T{
Select a shell environment to launch at startup (default: zsh)
T}
_
.TE
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
The environment variables configured with \fB\-\-env ENVS\fP during the \fBcreation\fP of a \fBnew\fP container will be available to \fBall\fP processes of the container during the \fBentire life cycle\fP of the container.
.UNINDENT
.UNINDENT
.SS Command examples
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Start interactively a container
exegol start

# Create a demo container using full image
exegol start demo full

# Spawn a shell from demo container
exegol start demo

# Create a container test with a custom shared workspace
exegol start test full \-w \(dq./project/pentest/\(dq

# Create a container test sharing the current working directory
exegol start test full \-cwd

# Create a container htb with a VPN
exegol start htb full \-\-vpn \(dq~/vpn/lab_Dramelac.ovpn\(dq

# Create a container app with custom volume
exegol start app full \-V \(dq/var/app/:/app/\(dq

# Get a shell based on tmux
exegol start \-\-shell tmux

# Share a specific hardware device (like Proxmark)
exegol start \-d \(dq/dev/ttyACM0\(dq

# Share every USB device connected to the host
exegol start \-d \(dq/dev/bus/usb/\(dq
.EE
.UNINDENT
.UNINDENT
.SS \fBinfo\fP action
.sp
The \fBinfo\fP action aims at displaying all the information specific to the Exegol project on the current system.
This action can also be used by targeting a specific container to display its configuration in detail.
.sp
Depending on the verbosity level specified in the command\-line, the information displayed will be more or less detailed accordingly.
Standard (default)
.sp
Verbose
.sp
Advanced
.sp
Debug
.INDENT 0.0
.INDENT 3.5
.sp
.EX
exegol info
.EE
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
List of available Exegol Images
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Name of the image
.IP \(bu 2
Size of each image (disk space if the image is installed, otherwise its compressed size to download for installation)
.IP \(bu 2
Status of each image
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Not installed (Image available for download from dockerhub)
.IP \(bu 2
Up to date (The latest version of the image is installed and ready to be used)
.IP \(bu 2
Update available (A new version is available for download on dockerhub)
.IP \(bu 2
Outdated (Old version of an image that has been updated since)
.IP \(bu 2
Local image (Locally built image)
.IP \(bu 2
Discontinued (if your image is no longer available on dockerhub)
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
List of Exegol Containers
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Name of each container
.IP \(bu 2
Container status (Stopped or running)
.IP \(bu 2
Image name (Exegol image used as a base to create the container)
.IP \(bu 2
Configurations (Display of non\-default configurations)
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
exegol info \-v
.EE
.UNINDENT
.UNINDENT
.sp
In the verbose mode, the following additional elements are displayed. Everything from the lower verbosity level is still displayed.
.INDENT 0.0
.IP \(bu 2
Enumerate every user configuration (see details \fI\%here\fP)
.IP \(bu 2
In the list of available Exegol Images
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Image ID
.IP \(bu 2
Build date
.IP \(bu 2
Image architecture (AMD64 / ARM64)
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
In the list of Exegol Containers
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Container id
.IP \(bu 2
Full configuration
.IP \(bu 2
List of non\-technical volumes
.IP \(bu 2
List of Devices
.IP \(bu 2
List of Ports (Applicable if network sharing with host is not enabled)
.IP \(bu 2
List of custom environment variables
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
exegol info \-vv
.EE
.UNINDENT
.UNINDENT
.sp
In the advanced mode, the following additional elements are displayed. Everything from the lower verbosity levels is still displayed.
.INDENT 0.0
.IP \(bu 2
Enumerate the settings from the user configuration at \fB~/.exegol/config.yml\fP (see details \fI\%here\fP)
.IP \(bu 2
List the different exegol modules
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Modules name
.IP \(bu 2
Their update status
.IP \(bu 2
Their git branch (if applicable)
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
exegol info \-vvv
.EE
.UNINDENT
.UNINDENT
.sp
In the debug mode, everything from the lower verbosity levels is still displayed, as well as logs from internal methods and functions. Those logs can be useful for maintainers and developers in case of bug, or for making sure everything works properly.
.SS Options
.sp
The info action does not have many parameters, its use is relatively simple. This action can either be used to gather general information (available images, containers, user configs, etc.), or gather information about a specific container and display its configuration.
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fBCONTAINER\fP
T}	T{
Optional positional argument to indicate the container tag of which to display the configuration.
T}
_
.TE
.sp
Global options can still be used, like for any action.
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fB\-h\fP, \fB\-\-help\fP
T}	T{
Show the help message of any action
T}
_
T{
\fB\-v\fP, \fB\-\-verbose\fP
T}	T{
Verbosity level (\-v for verbose, \-vv for advanced, \-vvv for debug)
T}
_
T{
\fB\-q\fP, \fB\-\-quiet\fP
T}	T{
Show no information at all
T}
_
T{
\fB\-k\fP, \fB\-\-insecure\fP
T}	T{
Allow insecure server connections for web requests, e.g. when fetching info from DockerHub (default: Secure)
T}
_
T{
\fB\-\-offline\fP
T}	T{
Run exegol in offline mode, no request will be made on internet (default: Disable)
T}
_
T{
\fB\-\-arch {arm64,amd64}\fP
T}	T{
Overwrite default image architecture (default: host’s arch)
T}
_
.TE
.SS Command examples
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Print containers and images essentials information:
exegol info

# Print the detailed configuration of the \(dqdemo\(dq container:
exegol info demo

# Print verbose information:
exegol info \-v

# Print advanced information:
exegol info \-vv

# Print debug information:
exegol info \-vvv
.EE
.UNINDENT
.UNINDENT
.SS \fBexec\fP action
.sp
This action allows to run a single command in a single container instead of loading a full interactive shell.
.sp
When this action is used it is possible to execute a command either in:
.INDENT 0.0
.IP \(bu 2
a \fBtemporary\fP container created especially to execute the command, and \fBautomatically deleted\fP at the end of the execution: the name of an exegol \fBimage\fP must be provided from which a temporary container will be created
.IP \(bu 2
a standard Exegol container (already existing, or not): the name of an exegol \fBcontainer\fP must then be provided. This container will be created in interactive mode if it does not already exist
.UNINDENT
.sp
The executed command can be executed either:
.INDENT 0.0
.IP \(bu 2
in the \fBbackground\fP mode (i.e. like a daemon): exegol \fBterminates immediately\fP after the command is launched and does not wait for its execution to be completed. No process is left hanging (useful when running GUI apps for instance).
.IP \(bu 2
in \fBstandard mode\fP: exegol will \fBwait\fP for the end of the process to stop the container (and delete it if
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
In standard execution mode, it is possible to ask exegol to display the command \fBoutput\fP (stdout/stderr) in the terminal by adding \fB\-v\fP parameter.
.UNINDENT
.UNINDENT
.SS Options
.sp
Since the exec action can also create containers, it shares the same parameters as the \fI\%start action\fP\&.
.sp
There are also additional parameters, unique to the \fBexec\fP action:
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fBCONTAINER\fP or \fBIMAGE\fP
T}	T{
This option indicates the \fBcontainer\fP name to use to execute the command. If the \fB\-\-tmp\fP parameter is used, this name will be used to target an \fBimage\fP\&.
T}
_
T{
\fBCOMMAND\fP
T}	T{
Single command to execute in the container.
T}
_
T{
\fB\-b\fP, \fB\-\-background\fP
T}	T{
Executes the command in background as a daemon.
T}
_
T{
\fB\-\-tmp\fP
T}	T{
Creates a dedicated and temporary container to execute the command.
T}
_
.TE
.SS Command examples
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Execute the command bloodhound in the container demo:
exegol exec demo bloodhound

# Execute the command \(aqnmap \-h\(aq with console output in the container demo:
exegol exec \-v demo \(aqnmap \-h\(aq

# Execute a command in background within the demo container:
exegol exec \-b demo bloodhound

# Execute the command bloodhound in a temporary container based on the full image:
exegol exec \-\-tmp full bloodhound

# Execute a command in background with a temporary container:
exegol exec \-b \-\-tmp full bloodhound

# Execute Wireshark in background, in a privileged temporary container:
exegol exec \-\-background \-\-tmp \-\-privileged \(dqnightly\(dq \(dqwireshark\(dq

# Execute the command wireshark with network admin privileged:
exegol exec \-b \-\-tmp \-\-cap NET_ADMIN full wireshark
.EE
.UNINDENT
.UNINDENT
.SS \fBupdate\fP action
.SS The update process
.sp
The exegol wrapper has an \fBupdate\fP action dedicated to updating the different modules (wrapper, resources, etc.) of the project as well as the (docker) Exegol images.
.SS Modules updates
.sp
This action make sure the local copies of the following repositories are up to date:
.INDENT 0.0
.IP \(bu 2
\fI\%Exegol\fP (wrapper code). If the wrapper has been installed with Pip, it will not be able to self\-update, updating the package through Pip will be required (e.g. \fBpython3 \-m pip install \-\-upgrade exegol\fP).
.IP \(bu 2
\fI\%Exegol\-images\fP (docker building files)
.IP \(bu 2
\fI\%Exegol\-resources\fP (offline resources, \fI\%exegol\-resources\fP). This module is optional, and users can choose to install/update it at any time.
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
When running \fBexegol update \-v\fP, the user will be able to choose from what branch them module should be synchronized with, allowing to switch easily between release and dev versions.
.UNINDENT
.UNINDENT
.SS Images updates
.sp
Once the local code base is updated, the wrapper compares the installed Exegol images with those offered on the Dockerhub registry. If no parameters have been provided at command\-line, an interactive selection will be possible to choose the images to update (if updates are available).
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
Older versions of images will be automatically deleted if they are no longer used by any container and if a newer version of the same image is installed.
This automatic deletion behavior is a default configuration that can be modified in the \fI\%configuration file\fP if needed, but it’s advised not to change it as disk space is not unlimited and Exegol image can take up to 30GB.
.UNINDENT
.UNINDENT
.SS Options
.sp
The options of the \fBupdate\fP action are the following.
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
IMAGE
T}	T{
This option specifies what image to update.
T}
_
T{
\fB\-\-skip\-git\fP
T}	T{
Skip \fI\%modules updates\fP\&.
T}
_
T{
\fB\-\-skip\-images\fP
T}	T{
Skip \fI\%images updates\fP\&.
T}
_
.TE
.SS Command examples
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Update interactively an exegol image:
exegol update

# Update the full image:
exegol update full

# Update the full image without updating exegol modules:
exegol update \-\-skip\-git full

# Update exegol modules and have the option to change branch without updating docker image:
exegol update \-v \-\-skip\-images
.EE
.UNINDENT
.UNINDENT
.SS \fBstop\fP action
.sp
The purpose of the \fBstop\fP action is to stop one or more Exegol containers.
.sp
If these containers have a VPN configuration, shutting down the container will cause the VPN tunnel to be disconnected.
.SS Options
.sp
The options of the stop action are limited to selecting the container(s) to be stopped.
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fBCONTAINER\fP
T}	T{
Tag used to target one or more Exegol containers
T}
_
.TE
.SS Command examples
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Stop interactively one or more containers:
exegol stop

# Stop the \(dqdemo\(dq container:
exegol stop \(dqdemo\(dq

# Stop the \(dqdemo\(dq, \(dqtest\(dq and \(dqdev\(dq container:
exegol stop \(dqdemo\(dq \(dqtest\(dq \(dqdev\(dq
.EE
.UNINDENT
.UNINDENT
.SS \fBrestart\fP action
.sp
The purpose of the \fBrestart\fP action is to stop and directly restart an Exegol container.
.sp
If these containers have a \fBprivileged\fP or \fBdevice\fP configuration, restarting the container will refresh the available devices inside the container.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Restarting a container will reset the \fBhosts\fP, \fBresolv.conf\fP files (and probably more).
.UNINDENT
.UNINDENT
.SS Options
.sp
The options of the restart action are limited to selecting the container to be restarted and some starting options that can be also found on the \fI\%start action\fP\&.
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fBCONTAINER\fP
T}	T{
Tag used to target the Exegol containers to restart
T}
_
.TE
.SS Command examples
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Restart interactively one container:
exegol restart

# Restart the \(dqdemo\(dq container:
exegol restart \(dqdemo\(dq
.EE
.UNINDENT
.UNINDENT
.SS \fBremove\fP action
.sp
The purpose of the \fBremove\fP action is to remove one or more Exegol container.
.sp
If the deleted container was using an outdated image, the wrapper will (by default) try to delete that outdated image automatically (unless this default behavior is changed in the \fI\%exegol configuration file\fP, which is not advised since disk space is not limited and Exegol images can take up to 30GB).
.sp
When deleting the container, the wrapper will check if the content of the \fB/workspace\fP volume is empty. If the workspace is \fBempty\fP, exegol will \fBautomatically delete\fP the folder on the host, otherwise it will \fBexplicitly ask the user\fP if the workspace content should be \fBdeleted\fP or not.
.SS Options
.sp
The options of the \fBremove\fP action are limited to selecting the container(s) to be removed and forcing the removal without asking the user for interactive confirmation.
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fBCONTAINER\fP
T}	T{
Tag used to target one or more Exegol containers
T}
_
T{
\fB\-F\fP, \fB\-\-force\fP
T}	T{
Remove container without interactive user confirmation (confirmation will still be required for removing non\-empty workspaces).
T}
_
.TE
.SS Command examples
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Remove interactively one or more containers:
exegol remove

# Remove the \(dqdemo\(dq container:
exegol remove \(dqdemo\(dq

# Remove the \(dqdemo\(dq, \(dqtest\(dq and \(dqdev\(dq container without asking for user confirmation:
exegol remove \-F \(dqdemo\(dq \(dqtest\(dq \(dqdev\(dq
.EE
.UNINDENT
.UNINDENT
.SS \fBuninstall\fP action
.sp
The purpose of the \fBuninstall\fP action is to remove one or more Exegol images.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The wrapper will try to delete the selected exegol images but this can only work if the selected images are \fBnot used by any container\fP anymore. A container based on an image that doesn’t exist anymore cannot run.
.UNINDENT
.UNINDENT
.SS Options
.sp
The options of the \fBuninstall\fP action are limited to selecting the image(s) to be removed, and forcing the removal without asking the user for interactive confirmation.
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fBIMAGE\fP
T}	T{
Tag used to target one or more Exegol images
T}
_
T{
\fB\-F\fP, \fB\-\-force\fP
T}	T{
Remove image without interactive user confirmation.
T}
_
.TE
.SS Command examples
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Remove interactively one or more containers:
exegol uninstall

# Remove the \(dqfull\(dq container:
exegol uninstall \(dqfull\(dq

# Remove the \(dqfull\(dq, \(dqad\(dq and \(dqweb\(dq container without asking for user confirmation:
exegol uninstall \-F \(dqfull\(dq \(dqad\(dq \(dqweb\(dq
.EE
.UNINDENT
.UNINDENT
.SS \fBversion\fP action
.sp
The \fBversion\fP action is mostly used for debugging purposes, it only displays information about the Exegol setup on the system.
.sp
In debug mode (\fB\-vvv\fP), it also displays information about the system and wrapper installation context.
.SS Options
.sp
The options available for the version action are the global options that affect the behavior of all exegol actions.
.TS
center;
|l|l|.
_
T{
Option
T}	T{
Description
T}
_
T{
\fB\-h\fP, \fB\-\-help\fP
T}	T{
Show the help message of any action
T}
_
T{
\fB\-v\fP, \fB\-\-verbose\fP
T}	T{
Verbosity level (\-v for verbose, \-vv for advanced, \-vvv for debug)
T}
_
T{
\fB\-q\fP, \fB\-\-quiet\fP
T}	T{
Show no information at all
T}
_
T{
\fB\-k\fP, \fB\-\-insecure\fP
T}	T{
Allow insecure server connections for web requests, e.g. when fetching info from DockerHub (default: Secure)
T}
_
T{
\fB\-\-offline\fP
T}	T{
Run exegol in offline mode, no request will be made on internet (default: Disable)
T}
_
T{
\fB\-\-arch {arm64,amd64}\fP
T}	T{
Overwrite default image architecture (default: host’s arch)
T}
_
.TE
.SS Command examples
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Show version information
exegol version

# Show version and system information
exegol version \-vvv
.EE
.UNINDENT
.UNINDENT
.SS Advanced uses
.INDENT 0.0
.IP \(bu 2
\fI\%Exegol home directory\fP
.IP \(bu 2
\fI\%Exegol configuration\fP
.IP \(bu 2
\fI\%My\-resources\fP
.IP \(bu 2
\fI\%Local builds\fP
.UNINDENT
.SS Exegol home directory
.sp
The \fB~/.exegol\fP folder exists in the user’s home folder to centralize \fI\%“exegol resources”\fP, \fI\%“my\-resources”\fP, volumes and also the configuration file.
.INDENT 0.0
.IP \(bu 2
The \fBconfiguration file\fP (YAML) is located at \fB~/.exegol/config.yml\fP and is generated by the wrapper during the first execution, with the default configurations.
.IP \(bu 2
By default, every exegol container has a \fBworkspace volume\fP\&. If the path of this volume is not specified by the user (\fI\%see start parameters\fP), a folder with the name of the container will be created in the \fI\%“private workspace”\fP folder. By default, this folder is located at \fB~/.exegol/workspaces/\fP\&.
.UNINDENT
.SS Exegol configuration
.sp
The Exegol wrapper is configured with many default settings. Most of them can be modified with a simple argument.
For productivity purposes, setting a different default behavior once and not have to add the same options everytime is interesting. For this exact purpose, a configuration file exists that allows users to persistently change the behavior and operations to be performed by default.
.sp
The user configuration currently in place can be viewed with the command: \fBexegol info \-v\fP\&. More information on the \fI\%info page\fP\&.
.sp
Within the \fB~/.exegol/config.yml\fP file, several settings can be configured to customize the Exegol experience, all distributed in multiple sections below.
Volumes
.sp
Config
The volume section allows to change the default path for various volumes.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Volume path can be changed at any time but already existing containers will not be affected by the update and will keep the original paths they were created with.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fBmy_resources_path\fP: the “my\-resources” volume is a storage space dedicated to the user to customize his environment and tools. This volume is, by default, shared across all exegol containers. See \fI\%details about it\fP\&.
.IP \(bu 2
\fBexegol_resources_path\fP: exegol\-resources are data and static tools downloaded in addition to docker images. These tools are complementary and are accessible directly from the host. See \fI\%details\fP\&.
.IP \(bu 2
\fBprivate_workspace_path\fP: when containers do not have an explicitly declared workspace at their creation (i.e. with \fB\-\-cwd\-mount\fP, or \fB\-\-workspace\fP), a dedicated folder will be created at this location to share the workspace with the host but also to save the data after deleting the container.
.UNINDENT
The config section allows you to modify the default behavior of the Exegol wrapper.
.INDENT 0.0
.IP \(bu 2
\fBauto_check_update\fP: enables automatic check for wrapper update. (Default: \fBTrue\fP)
.IP \(bu 2
\fBauto_remove_image\fP: automatically remove outdated image when they are no longer used. (Default: \fBTrue\fP)
.IP \(bu 2
\fBauto_update_workspace_fs\fP: automatically modifies the permissions of folders and sub\-folders in your workspace by default to enable file sharing between the container with your host user. (Default: \fBFalse\fP)
.IP \(bu 2
\fBdefault_start_shell\fP: default shell command to start. (Default: \fBzsh\fP)
.UNINDENT
Shell logging
.sp
Desktop
Change the configuration of the shell logging functionality.
.INDENT 0.0
.IP \(bu 2
\fBlogging_method\fP: Choice of the method used to record the sessions, \fBscript\fP or \fBasciinema\fP\&. (Default: \fBasciinema\fP)
.IP \(bu 2
\fBenable_log_compression\fP: Enable automatic compression of log files (with gzip). (Default: \fBTrue\fP)
.UNINDENT
Change the configuration of the virtual Desktop feature.
.INDENT 0.0
.IP \(bu 2
\fBenabled_by_default\fP: Enables or not the desktop mode by default. If this attribute is set to True, then using the CLI \fB\-\-desktop\fP option will be inverted and will \fBDISABLE\fP the feature (Default: \fBFalse\fP)
.IP \(bu 2
\fBdefault_protocol\fP: Default desktop protocol,can be \fBhttp\fP, or \fBvnc\fP depending on your wrapper / image version. (Default: \fBhttp\fP)
.IP \(bu 2
\fBlocalhost_by_default\fP: Desktop service is exposed on localhost by default. If set to true, services will be exposed on \fBlocalhost\fP (127.0.0.1) otherwise it will be exposed on \fB0.0.0.0\fP\&. This setting can be overwritten with \fI\%–desktop\-config\fP\&. (Default: \fBTrue\fP)
.UNINDENT
.SS My\-resources
.sp
“My\-resources” is a major feature allowing Exegol users to have a volume, shared with all Exegol containers, that can centralize their own resources and configurations. It allows users to enjoy their own tools that are not available in Exegol but also to customize their Exegol setup. More information on the dedicated documentation page \fI\%My\-Resources\fP\&.
.sp
This volume is accessible from the host at \fB~/.exegol/my\-resources/\fP and from the containers (if the feature was left enabled at the container creation) at \fB/opt/my\-resources\fP\&.
.sp
To facilitate its use, a read/write access system \fBshared\fP (between the host user and the container root user) has been implemented.
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
To allow this permissions sharing, the “my\-resources” folder (and all subdirectories) must have the Set\-GID permission bit set.
This is done automatically by the wrapper if the current user has sufficient rights.
Otherwise, the wrapper will display a sudo command to be executed manually to update the relevant permissions.
.UNINDENT
.UNINDENT
.sp
The host path of this volume can be changed from the configuration file \fB~/.exegol/config.yml\fP\&.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Be careful \fBnot\fP to use a folder with \fBexisting data\fP, in which case their permissions will be automatically modified to enable access sharing.
.IP \(bu 2
This change will not be applied to already existing exegol containers.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Local builds
.sp
When installing Exegol, while downloading the pre\-built and compressed Docker images from Dockerhub is advised, users can build their own images locally. The wrapper has a \fBlocal build feature\fP to create and manage local exegol images.
.sp
The \fBexegol install\fP command can be used for that purpose. The user must specify an image name that does \fBnot\fP match one of the remote images available from dockerhub. The wrapper will suggest to build a local image with this name. If the user chooses to build an image locally, he will then have to choose a \fBbuild profile\fP among those available. The build profile is merely the dockerfile to follow during the build process. An arbitrary dockerfile can be added in \fB/path/to/Exegol/exegol\-docker\-build/name.dockerfile\fP\&.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
the \fB\-v\fP parameter can be added to have more details about the build process.
.IP \(bu 2
the detailed logs of the docker build process can also be saved in a file with the \fB\-\-build\-log\fP parameter.
.UNINDENT
.UNINDENT
.UNINDENT
.SS Tools list
.sp
Click \fI\%here\fP to see the lists of tools featured in the latest nightly images.
.sp
\fBERROR:\fP
.INDENT 0.0
.INDENT 3.5
[August 5th, 2023] \- The lists descriptions were mostly AI\-generated for this first version of the tools list in order to get the list shipped quickly. Many descriptions are wrong and will be fixed very soon.
.UNINDENT
.UNINDENT
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
The lists featured here are automatically generated. Exegol features CI/CD pipelines that build the images. At build, most tools are tested. If at least one test fails, the image doesn’t get published.
.UNINDENT
.UNINDENT
.TS
center;
|l|l|l|l|l|.
_
T{
Image tag
T}	T{
Version
T}	T{
Arch
T}	T{
Build date
T}	T{
Tools list
T}
_
T{
nightly
T}	T{
58d605bb
T}	T{
arm64
T}	T{
2023\-12\-20T20:36:04Z
T}	T{
\fBnightly_58d605bb_arm64.csv\fP
T}
_
T{
nightly
T}	T{
58d605bb
T}	T{
amd64
T}	T{
2023\-12\-20T20:27:20Z
T}	T{
\fBnightly_58d605bb_amd64.csv\fP
T}
_
.TE
.TS
center;
|l|l|l|l|l|.
_
T{
Image tag
T}	T{
Version
T}	T{
Arch
T}	T{
Build date
T}	T{
Tools list
T}
_
T{
full
T}	T{
3.1.2
T}	T{
arm64
T}	T{
2023\-12\-22T12:20:18Z
T}	T{
\fBfull_3.1.2_arm64.csv\fP
T}
_
T{
full
T}	T{
3.1.2
T}	T{
amd64
T}	T{
2023\-12\-22T12:04:26Z
T}	T{
\fBfull_3.1.2_amd64.csv\fP
T}
_
T{
ad
T}	T{
3.1.2
T}	T{
arm64
T}	T{
2023\-12\-22T12:03:46Z
T}	T{
\fBad_3.1.2_arm64.csv\fP
T}
_
T{
ad
T}	T{
3.1.2
T}	T{
amd64
T}	T{
2023\-12\-22T11:41:22Z
T}	T{
\fBad_3.1.2_amd64.csv\fP
T}
_
T{
web
T}	T{
3.1.2
T}	T{
arm64
T}	T{
2023\-12\-22T12:08:45Z
T}	T{
\fBweb_3.1.2_arm64.csv\fP
T}
_
T{
web
T}	T{
3.1.2
T}	T{
amd64
T}	T{
2023\-12\-22T11:46:29Z
T}	T{
\fBweb_3.1.2_amd64.csv\fP
T}
_
T{
light
T}	T{
3.1.2
T}	T{
arm64
T}	T{
2023\-12\-22T00:48:17Z
T}	T{
\fBlight_3.1.2_arm64.csv\fP
T}
_
T{
light
T}	T{
3.1.2
T}	T{
amd64
T}	T{
2023\-12\-22T00:08:53Z
T}	T{
\fBlight_3.1.2_amd64.csv\fP
T}
_
T{
osint
T}	T{
3.1.2
T}	T{
arm64
T}	T{
2023\-12\-22T00:43:53Z
T}	T{
\fBosint_3.1.2_arm64.csv\fP
T}
_
T{
osint
T}	T{
3.1.2
T}	T{
amd64
T}	T{
2023\-12\-22T00:02:50Z
T}	T{
\fBosint_3.1.2_amd64.csv\fP
T}
_
T{
full
T}	T{
3.1.1
T}	T{
amd64
T}	T{
2023\-08\-18T01:36:37Z
T}	T{
\fBfull_3.1.1_amd64.csv\fP
T}
_
T{
full
T}	T{
3.1.1
T}	T{
arm64
T}	T{
2023\-08\-18T01:36:23Z
T}	T{
\fBfull_3.1.1_arm64.csv\fP
T}
_
T{
ad
T}	T{
3.1.1
T}	T{
amd64
T}	T{
2023\-08\-18T02:59:03Z
T}	T{
\fBad_3.1.1_amd64.csv\fP
T}
_
T{
ad
T}	T{
3.1.1
T}	T{
arm64
T}	T{
2023\-08\-18T02:58:49Z
T}	T{
\fBad_3.1.1_arm64.csv\fP
T}
_
T{
web
T}	T{
3.1.1
T}	T{
arm64
T}	T{
2023\-08\-18T01:08:44Z
T}	T{
\fBweb_3.1.1_arm64.csv\fP
T}
_
T{
web
T}	T{
3.1.1
T}	T{
amd64
T}	T{
2023\-08\-18T01:35:14Z
T}	T{
\fBweb_3.1.1_amd64.csv\fP
T}
_
T{
osint
T}	T{
3.1.1
T}	T{
arm64
T}	T{
2023\-08\-18T01:04:50Z
T}	T{
\fBosint_3.1.1_arm64.csv\fP
T}
_
T{
osint
T}	T{
3.1.1
T}	T{
amd64
T}	T{
2023\-08\-18T01:34:47Z
T}	T{
\fBosint_3.1.1_amd64.csv\fP
T}
_
T{
light
T}	T{
3.1.1
T}	T{
arm64
T}	T{
2023\-08\-18T01:05:12Z
T}	T{
\fBlight_3.1.1_arm64.csv\fP
T}
_
T{
light
T}	T{
3.1.1
T}	T{
amd64
T}	T{
2023\-08\-18T01:35:00Z
T}	T{
\fBlight_3.1.1_amd64.csv\fP
T}
_
T{
full
T}	T{
3.1.0
T}	T{
arm64
T}	T{
2023\-08\-09T09:12:21Z
T}	T{
\fBfull_3.1.0_arm64.csv\fP
T}
_
T{
full
T}	T{
3.1.0
T}	T{
amd64
T}	T{
2023\-08\-09T22:27:20Z
T}	T{
\fBfull_3.1.0_amd64.csv\fP
T}
_
T{
ad
T}	T{
3.1.0
T}	T{
amd64
T}	T{
2023\-08\-10T00:33:47Z
T}	T{
\fBad_3.1.0_amd64.csv\fP
T}
_
T{
ad
T}	T{
3.1.0
T}	T{
arm64
T}	T{
2023\-08\-10T00:11:36Z
T}	T{
\fBad_3.1.0_arm64.csv\fP
T}
_
T{
web
T}	T{
3.1.0
T}	T{
amd64
T}	T{
2023\-08\-09T11:12:12Z
T}	T{
\fBweb_3.1.0_amd64.csv\fP
T}
_
T{
web
T}	T{
3.1.0
T}	T{
arm64
T}	T{
2023\-08\-09T11:11:33Z
T}	T{
\fBweb_3.1.0_arm64.csv\fP
T}
_
T{
osint
T}	T{
3.1.0
T}	T{
amd64
T}	T{
2023\-08\-09T10:50:11Z
T}	T{
\fBosint_3.1.0_amd64.csv\fP
T}
_
T{
osint
T}	T{
3.1.0
T}	T{
arm64
T}	T{
2023\-08\-09T10:48:56Z
T}	T{
\fBosint_3.1.0_arm64.csv\fP
T}
_
T{
light
T}	T{
3.1.0
T}	T{
amd64
T}	T{
2023\-08\-09T02:53:53Z
T}	T{
\fBlight_3.1.0_amd64.csv\fP
T}
_
T{
light
T}	T{
3.1.0
T}	T{
arm64
T}	T{
2023\-08\-09T01:50:40Z
T}	T{
\fBlight_3.1.0_arm64.csv\fP
T}
_
.TE
.sp
Below is the list of tools featured in the latest nightly (AMD64) image.
.TS
center;
|l|l|l|.
_
T{
Tool
T}	T{
Link
T}	T{
Description
T}
_
T{
aclpwn
T}	T{
\fI\%https://github.com/aas\-n/aclpwn.py\fP
T}	T{
Tool for testing the security of Active Directory access controls.
T}
_
T{
adidnsdump
T}	T{
\fI\%https://github.com/dirkjanm/adidnsdump\fP
T}	T{
Active Directory Integrated DNS dump utility
T}
_
T{
aircrack\-ng
T}	T{
\fI\%https://www.aircrack\-ng.org\fP
T}	T{
A suite of tools for wireless penetration testing
T}
_
T{
amass
T}	T{
\fI\%https://github.com/OWASP/Amass\fP
T}	T{
A DNS enumeration / attack surface mapping & external assets discovery tool
T}
_
T{
amber
T}	T{
\fI\%https://github.com/EgeBalci/amber\fP
T}	T{
Forensic tool to recover browser history / cookies and credentials
T}
_
T{
androguard
T}	T{
\fI\%https://github.com/androguard/androguard\fP
T}	T{
Reverse engineering and analysis of Android applications
T}
_
T{
android\-tools\-adb
T}	T{
\fI\%https://developer.android.com/studio/command\-line/adb\fP
T}	T{
A collection of tools for debugging Android applications
T}
_
T{
anew
T}	T{
\fI\%https://github.com/tomnomnom/anew\fP
T}	T{
A simple tool for filtering and manipulating text data / such as log files and other outputs.
T}
_
T{
angr
T}	T{
\fI\%https://github.com/angr/angr\fP
T}	T{
a platform\-agnostic binary analysis framework
T}
_
T{
apksigner
T}	T{
\fI\%https://source.android.com/security/apksigning\fP
T}	T{
arguably the most important step to optimize your APK file
T}
_
T{
apktool
T}	T{
\fI\%https://github.com/iBotPeaches/Apktool\fP
T}	T{
It is a tool for reverse engineering 3rd party / closed / binary Android apps.
T}
_
T{
arjun
T}	T{
\fI\%https://github.com/s0md3v/Arjun\fP
T}	T{
HTTP parameter discovery suite.
T}
_
T{
arsenal
T}	T{
\fI\%https://github.com/Orange\-Cyberdefense/arsenal\fP
T}	T{
Powerful weapons for penetration testing.
T}
_
T{
asdf
T}	T{
\fI\%https://github.com/asdf\-vm/asdf\fP
T}	T{
Extendable version manager with support for ruby python go etc
T}
_
T{
assetfinder
T}	T{
\fI\%https://github.com/tomnomnom/assetfinder\fP
T}	T{
Tool to find subdomains and IP addresses associated with a domain.
T}
_
T{
autoconf
T}	T{
\fI\%https://www.gnu.org/software/autoconf/autoconf.html\fP
T}	T{
Tool for producing shell scripts to configure source code packages
T}
_
T{
autorecon
T}	T{
\fI\%https://github.com/Tib3rius/AutoRecon\fP
T}	T{
Multi\-threaded network reconnaissance tool which performs automated enumeration of services.
T}
_
T{
avrdude
T}	T{
\fI\%https://github.com/avrdudes/avrdude\fP
T}	T{
AVRDUDE is a command\-line program that allows you to download/upload/manipulate the ROM and EEPROM contents of AVR microcontrollers using the in\-system programming technique (ISP).
T}
_
T{
awscli
T}	T{
\fI\%https://aws.amazon.com/cli/\fP
T}	T{
Command\-line interface for Amazon Web Services.
T}
_
T{
azure\-cli
T}	T{
\fI\%https://github.com/Azure/azure\-cli\fP
T}	T{
A great cloud needs great tools; we’re excited to introduce Azure CLI our next generation multi\-platform command line experience for Azure.
T}
_
T{
bettercap
T}	T{
\fI\%https://github.com/bettercap/bettercap\fP
T}	T{
The Swiss Army knife for 802.11 / BLE / and Ethernet networks reconnaissance and MITM attacks.
T}
_
T{
binwalk
T}	T{
\fI\%https://github.com/ReFirmLabs/binwalk\fP
T}	T{
Binwalk is a tool for analyzing / reverse engineering / and extracting firmware images.
T}
_
T{
Blackbird
T}	T{
\fI\%https://github.com/p1ngul1n0/blackbird\fP
T}	T{
An OSINT tool to search fast for accounts by username across 581 sites.
T}
_
T{
bloodhound
T}	T{
\fI\%https://github.com/BloodHoundAD/BloodHound\fP
T}	T{
Active Directory security tool for reconnaissance and attacking AD environments.
T}
_
T{
BloodHound\-CE
T}	T{
\fI\%https://github.com/SpecterOps/BloodHound\fP
T}	T{
Active Directory security tool for reconnaissance and attacking AD environments (Community Edition)
T}
_
T{
bloodhound\-ce.py
T}	T{
\fI\%https://github.com/fox\-it/BloodHound.py\fP
T}	T{
BloodHound\-CE ingestor in Python.
T}
_
T{
bloodhound\-import
T}	T{
\fI\%https://github.com/fox\-it/BloodHound.py\fP
T}	T{
Import data into BloodHound for analyzing active directory trust relationships
T}
_
T{
bloodhound\-quickwin
T}	T{
\fI\%https://github.com/kaluche/bloodhound\-quickwin\fP
T}	T{
A tool for BloodHounding on Windows machines without .NET or Powershell installed
T}
_
T{
bloodhound.py
T}	T{
\fI\%https://github.com/fox\-it/BloodHound.py\fP
T}	T{
BloodHound ingestor in Python.
T}
_
T{
bolt
T}	T{
\fI\%https://github.com/s0md3v/bolt\fP
T}	T{
Bolt crawls the target website to the specified depth and stores all the HTML forms found in a database for further processing.
T}
_
T{
bqm
T}	T{
\fI\%https://github.com/Acceis/bqm\fP
T}	T{
Tool to deduplicate custom BloudHound queries from different datasets and merge them in one file.
T}
_
T{
brakeman
T}	T{
\fI\%https://github.com/presidentbeef/brakeman\fP
T}	T{
Static analysis tool for Ruby on Rails applications
T}
_
T{
bruteforce\-luks
T}	T{
\fI\%https://github.com/glv2/bruteforce\-luks\fP
T}	T{
A tool to help recover encrypted LUKS2 containers
T}
_
T{
bully
T}	T{
\fI\%https://github.com/aanarchyy/bully\fP
T}	T{
bully is a tool for brute\-forcing WPS (Wireless Protected Setup) PINs.
T}
_
T{
burpsuite
T}	T{
\fI\%https://portswigger.net/burp\fP
T}	T{
Web application security testing tool.
T}
_
T{
buster
T}	T{
\fI\%https://github.com/sham00n/Buster\fP
T}	T{
Advanced OSINT tool
T}
_
T{
byp4xx
T}	T{
\fI\%https://github.com/lobuhi/byp4xx\fP
T}	T{
A Swiss Army knife for bypassing web application firewalls and filters.
T}
_
T{
carbon14
T}	T{
\fI\%https://github.com/Lazza/carbon14\fP
T}	T{
OSINT tool for estimating when a web page was written.
T}
_
T{
Censys
T}	T{
\fI\%https://github.com/censys/censys\-python\fP
T}	T{
An easy\-to\-use and lightweight API wrapper for Censys APIs
T}
_
T{
certipy
T}	T{
\fI\%https://github.com/ly4k/Certipy\fP
T}	T{
Python tool to create and sign certificates
T}
_
T{
certsync
T}	T{
\fI\%https://github.com/zblurx/certsync\fP
T}	T{
certsync is a tool that helps you synchronize certificates between two directories.
T}
_
T{
cewl
T}	T{
\fI\%https://digi.ninja/projects/cewl.php\fP
T}	T{
Generates custom wordlists by spidering a target’s website and parsing the results
T}
_
T{
cewler
T}	T{
\fI\%https://github.com/roys/cewler\fP
T}	T{
CeWL alternative in Python
T}
_
T{
chainsaw
T}	T{
\fI\%https://github.com/WithSecureLabs/chainsaw\fP
T}	T{
Rapidly Search and Hunt through Windows Forensic Artefacts
T}
_
T{
checksec\-py
T}	T{
\fI\%https://github.com/Wenzel/checksec.py\fP
T}	T{
Python wrapper script for checksec.sh from paX.
T}
_
T{
chisel
T}	T{
\fI\%https://github.com/jpillora/chisel\fP
T}	T{
Go based TCP tunnel with authentication and encryption support
T}
_
T{
cloudfail
T}	T{
\fI\%https://github.com/m0rtem/CloudFail\fP
T}	T{
a reconnaissance tool for identifying misconfigured CloudFront domains.
T}
_
T{
cloudmapper
T}	T{
\fI\%https://github.com/duo\-labs/cloudmapper\fP
T}	T{
CloudMapper helps you analyze your Amazon Web Services (AWS) environments.
T}
_
T{
cloudsplaining
T}	T{
\fI\%https://github.com/salesforce/cloudsplaining\fP
T}	T{
AWS IAM Security Assessment tool that identifies violations of least privilege and generates a risk\-prioritized report.
T}
_
T{
cloudsploit
T}	T{
\fI\%https://github.com/aquasecurity/cloudsploit\fP
T}	T{
Cloud Security Posture Management
T}
_
T{
clusterd
T}	T{
\fI\%https://github.com/hatRiot/clusterd\fP
T}	T{
A tool to distribute and remotely manage Hacking Team’s RCS agents.
T}
_
T{
cmsmap
T}	T{
\fI\%https://github.com/Dionach/CMSmap\fP
T}	T{
Tool for security audit of web content management systems.
T}
_
T{
coercer
T}	T{
\fI\%https://github.com/p0dalirius/coercer\fP
T}	T{
DFS\-R target coercion tool
T}
_
T{
constellation
T}	T{
\fI\%https://github.com/constellation\-app/Constellation\fP
T}	T{
Find and exploit vulnerabilities in mobile applications.
T}
_
T{
corscanner
T}	T{
\fI\%https://github.com/chenjj/CORScanner\fP
T}	T{
a Python script for finding CORS misconfigurations.
T}
_
T{
cowpatty
T}	T{
\fI\%https://github.com/joswr1ght/cowpatty\fP
T}	T{
cowpatty is a tool for offline dictionary attacks against WPA\-PSK (Pre\-Shared Key) networks.
T}
_
T{
crackhound
T}	T{
\fI\%https://github.com/trustedsec/crackhound\fP
T}	T{
A fast WPA/WPA2/WPA3 WiFi Handshake capture / password recovery and analysis tool
T}
_
T{
crackmapexec
T}	T{
\fI\%https://github.com/Porchetta\-Industries/CrackMapExec\fP
T}	T{
Network scanner.
T}
_
T{
crunch
T}	T{
\fI\%https://github.com/crunchsec/crunch\fP
T}	T{
A wordlist generator where you can specify a standard character set or a character set you specify.
T}
_
T{
cupp
T}	T{
\fI\%https://github.com/Mebus/cupp\fP
T}	T{
Cupp is a tool used to generate personalized password lists based on target information.
T}
_
T{
CyberChef
T}	T{
\fI\%https://github.com/gchq/CyberChef/\fP
T}	T{
The Cyber Swiss Army Knife
T}
_
T{
cyperoth
T}	T{
\fI\%https://github.com/seajaysec/cypheroth\fP
T}	T{
Automated extensible toolset that runs cypher queries against Bloodhound’s Neo4j backend and saves output to spreadsheets.
T}
_
T{
darkarmour
T}	T{
\fI\%https://github.com/bats3c/darkarmour\fP
T}	T{
a tool to detect and evade common antivirus products
T}
_
T{
dex2jar
T}	T{
\fI\%https://github.com/pxb1988/dex2jar\fP
T}	T{
A tool to convert Android’s dex files to Java’s jar files
T}
_
T{
dfscoerce
T}	T{
\fI\%https://github.com/Wh04m1001/dfscoerce\fP
T}	T{
DFS\-R target coercion tool
T}
_
T{
dirb
T}	T{
\fI\%https://github.com/v0re/dirb\fP
T}	T{
Web Content Scanner
T}
_
T{
dirsearch
T}	T{
\fI\%https://github.com/maurosoria/dirsearch\fP
T}	T{
Tool for searching files and directories on a web site.
T}
_
T{
divideandscan
T}	T{
\fI\%https://github.com/snovvcrash/divideandscan\fP
T}	T{
Advanced subdomain scanner
T}
_
T{
dns2tcp
T}	T{
\fI\%https://github.com/alex\-sector/dns2tcp\fP
T}	T{
dns2tcp is a tool for relaying TCP connections over DNS.
T}
_
T{
dnschef
T}	T{
\fI\%https://github.com/iphelix/dnschef\fP
T}	T{
Tool for DNS MITM attacks
T}
_
T{
dnsenum
T}	T{
\fI\%https://github.com/fwaeytens/dnsenum\fP
T}	T{
dnsenum is a tool for enumerating DNS information about a domain.
T}
_
T{
dnsx
T}	T{
\fI\%https://github.com/projectdiscovery/dnsx\fP
T}	T{
A tool for DNS reconnaissance that can help identify subdomains and other related domains.
T}
_
T{
donpapi
T}	T{
\fI\%https://github.com/login\-securite/DonPAPI\fP
T}	T{
Dumping revelant information on compromised targets without AV detection
T}
_
T{
droopescan
T}	T{
\fI\%https://github.com/droope/droopescan\fP
T}	T{
Scan Drupal websites for vulnerabilities.
T}
_
T{
drupwn
T}	T{
\fI\%https://github.com/immunIT/drupwn\fP
T}	T{
Drupal security scanner.
T}
_
T{
eaphammer
T}	T{
\fI\%https://github.com/s0lst1c3/eaphammer\fP
T}	T{
EAPHammer is a toolkit for performing targeted evil twin attacks against WPA2\-Enterprise networks.
T}
_
T{
empire
T}	T{
\fI\%https://github.com/BC\-SECURITY/Empire\fP
T}	T{
post\-exploitation and adversary emulation framework
T}
_
T{
enum4linux\-ng
T}	T{
\fI\%https://github.com/cddmp/enum4linux\-ng\fP
T}	T{
Tool for enumerating information from Windows and Samba systems.
T}
_
T{
enyx
T}	T{
\fI\%https://github.com/trickster0/enyx\fP
T}	T{
Framework for building offensive security tools.
T}
_
T{
evilwinrm
T}	T{
\fI\%https://github.com/Hackplayers/evil\-winrm\fP
T}	T{
Tool to connect to a remote Windows system with WinRM.
T}
_
T{
exif
T}	T{
\fI\%https://exiftool.org/\fP
T}	T{
Utility to read / write and edit metadata in image / audio and video files
T}
_
T{
exifprobe
T}	T{
\fI\%https://github.com/hfiguiere/exifprobe\fP
T}	T{
Exifprobe is a command\-line tool to parse EXIF data from image files.
T}
_
T{
exiftool
T}	T{
\fI\%https://github.com/exiftool/exiftool\fP
T}	T{
ExifTool is a Perl library and command\-line tool for reading / writing and editing meta information in image / audio and video files.
T}
_
T{
exiv2
T}	T{
\fI\%https://github.com/Exiv2/exiv2\fP
T}	T{
Image metadata library and toolset
T}
_
T{
ExtractBitlockerKeys
T}	T{
\fI\%https://github.com/p0dalirius/ExtractBitlockerKeys\fP
T}	T{
A system administration or post\-exploitation script to automatically extract the bitlocker recovery keys from a domain.
T}
_
T{
eyewitness
T}	T{
\fI\%https://github.com/FortyNorthSecurity/EyeWitness\fP
T}	T{
a tool to take screenshots of websites / provide some server header info / and identify default credentials if possible.
T}
_
T{
fcrackzip
T}	T{
\fI\%https://github.com/hyc/fcrackzip\fP
T}	T{
Password cracker for zip archives.
T}
_
T{
fdisk
T}	T{
\fI\%https://github.com/karelzak/util\-linux\fP
T}	T{
Collection of basic system utilities / including fdisk partitioning tool
T}
_
T{
feroxbuster
T}	T{
\fI\%https://github.com/epi052/feroxbuster\fP
T}	T{
Simple / fast and recursive content discovery tool
T}
_
T{
ffuf
T}	T{
\fI\%https://github.com/ffuf/ffuf\fP
T}	T{
Fast web fuzzer written in Go.
T}
_
T{
fierce
T}	T{
\fI\%https://github.com/mschwager/fierce\fP
T}	T{
A DNS reconnaissance tool for locating non\-contiguous IP space
T}
_
T{
finalrecon
T}	T{
\fI\%https://github.com/thewhiteh4t/FinalRecon\fP
T}	T{
A web reconnaissance tool that gathers information about web pages
T}
_
T{
findomain
T}	T{
\fI\%https://github.com/findomain/findomain\fP
T}	T{
The fastest and cross\-platform subdomain enumerator.
T}
_
T{
finduncommonshares
T}	T{
\fI\%https://github.com/p0dalirius/FindUncommonShares\fP
T}	T{
Script that can help identify shares that are not commonly found on a Windows system.
T}
_
T{
firefox
T}	T{
\fI\%https://www.mozilla.org\fP
T}	T{
A web browser
T}
_
T{
foremost
T}	T{
\fI\%https://doc.ubuntu\-fr.org/foremost\fP
T}	T{
Foremost is a forensic tool for recovering files based on their headers / footers / and internal data structures.
T}
_
T{
freeipscanner
T}	T{
\fI\%https://github.com/scrt/freeipscanner\fP
T}	T{
A simple bash script to enumerate stale ADIDNS entries
T}
_
T{
freerdp2\-x11
T}	T{
\fI\%https://github.com/FreeRDP/FreeRDP\fP
T}	T{
FreeRDP is a free implementation of the Remote Desktop Protocol (RDP) released under the Apache license.
T}
_
T{
frida
T}	T{
\fI\%https://github.com/frida/frida\fP
T}	T{
Dynamic instrumentation toolkit
T}
_
T{
fuxploider
T}	T{
\fI\%https://github.com/almandin/fuxploider\fP
T}	T{
a Python tool for finding and exploiting file upload forms/directories.
T}
_
T{
fzf
T}	T{
\fI\%https://github.com/junegunn/fzf\fP
T}	T{
🌸 A command\-line fuzzy finder
T}
_
T{
gau
T}	T{
\fI\%https://github.com/lc/gau\fP
T}	T{
Fast tool for fetching URLs
T}
_
T{
genusernames
T}	T{
\fI\%https://gitlab.com/\-/snippets/2480505/raw/main/bash\fP
T}	T{
GenUsername is a Python tool for generating a list of usernames based on a name or email address.
T}
_
T{
GeoPincer
T}	T{
\fI\%https://github.com/tloja/GeoPincer\fP
T}	T{
GeoPincer is a script that leverages OpenStreetMap’s Overpass API in order to search for locations.
T}
_
T{
geowordlists
T}	T{
\fI\%https://github.com/p0dalirius/GeoWordlists\fP
T}	T{
tool to generate wordlists of passwords containing cities at a defined distance around the client city.
T}
_
T{
gf
T}	T{
\fI\%https://github.com/tomnomnom/gf\fP
T}	T{
A wrapper around grep to avoid typing common patterns
T}
_
T{
ghidra
T}	T{
\fI\%https://github.com/NationalSecurityAgency/ghidra\fP
T}	T{
Software reverse engineering suite of tools.
T}
_
T{
git\-dumper
T}	T{
\fI\%https://github.com/arthaud/git\-dumper\fP
T}	T{
Small script to dump a Git repository from a website.
T}
_
T{
githubemail
T}	T{
\fI\%https://github.com/paulirish/github\-email\fP
T}	T{
a command\-line tool to retrieve a user’s email from Github.
T}
_
T{
gittools
T}	T{
\fI\%https://github.com/internetwache/GitTools\fP
T}	T{
A collection of Git tools including a powerful Dumper for dumping Git repositories.
T}
_
T{
gmsadumper
T}	T{
\fI\%https://github.com/micahvandeusen/gMSADumper\fP
T}	T{
A tool for extracting credentials and other information from a Microsoft Active Directory domain.
T}
_
T{
gobuster
T}	T{
\fI\%https://github.com/OJ/gobuster\fP
T}	T{
Tool to discover hidden files and directories.
T}
_
T{
goldencopy
T}	T{
\fI\%https://github.com/Dramelac/GoldenCopy\fP
T}	T{
Copy the properties and groups of a user from neo4j (bloodhound) to create an identical golden ticket
T}
_
T{
GoMapEnum
T}	T{
\fI\%https://github.com/nodauf/GoMapEnum\fP
T}	T{
Nothing new but existing techniques are brought together in one tool.
T}
_
T{
gopherus
T}	T{
\fI\%https://github.com/tarunkant/Gopherus\fP
T}	T{
Gopherus is a simple command line tool for exploiting vulnerable Gopher servers.
T}
_
T{
gosecretsdump
T}	T{
\fI\%https://github.com/c\-sto/gosecretsdump\fP
T}	T{
Implements NTLMSSP network authentication protocol in Go
T}
_
T{
goshs
T}	T{
\fI\%https://github.com/patrickhener/goshs\fP
T}	T{
Goshs is a replacement for Python’s SimpleHTTPServer. It allows uploading and downloading via HTTP/S with either self\-signed certificate or user provided certificate and you can use HTTP basic auth.
T}
_
T{
gowitness
T}	T{
\fI\%https://github.com/sensepost/gowitness\fP
T}	T{
A website screenshot utility written in Golang.
T}
_
T{
GPOddity
T}	T{
\fI\%https://github.com/synacktiv/GPOddity\fP
T}	T{
Aiming at automating GPO attack vectors through NTLM relaying (and more)
T}
_
T{
gpp\-decrypt
T}	T{
\fI\%https://github.com/t0thkr1s/gpp\-decrypt\fP
T}	T{
A tool to decrypt Group Policy Preferences passwords
T}
_
T{
gqrx
T}	T{
\fI\%https://github.com/csete/gqrx\fP
T}	T{
Software defined radio receiver powered by GNU Radio and Qt
T}
_
T{
gron
T}	T{
\fI\%https://github.com/tomnomnom/gron\fP
T}	T{
Make JSON greppable!
T}
_
T{
h2csmuggler
T}	T{
\fI\%https://github.com/BishopFox/h2csmuggler\fP
T}	T{
HTTP Request Smuggling tool using H2C upgrade
T}
_
T{
h8mail
T}	T{
\fI\%https://github.com/khast3x/h8mail\fP
T}	T{
Email OSINT and breach hunting.
T}
_
T{
hackrf
T}	T{
\fI\%https://github.com/mossmann/hackrf\fP
T}	T{
Low cost software defined radio platform
T}
_
T{
haiti
T}	T{
\fI\%https://github.com/noraj/haiti\fP
T}	T{
haiti is a A CLI tool (and library) to identify hash types (hash type identifier).
T}
_
T{
hakrawler
T}	T{
\fI\%https://github.com/hakluke/hakrawler\fP
T}	T{
a fast web crawler for gathering URLs and other information from websites
T}
_
T{
hakrevdns
T}	T{
\fI\%https://github.com/hakluke/hakrevdns\fP
T}	T{
Reverse DNS lookup utility that can help with discovering subdomains and other information.
T}
_
T{
hashcat
T}	T{
\fI\%https://hashcat.net/hashcat\fP
T}	T{
A tool for advanced password recovery
T}
_
T{
hashonymize
T}	T{
\fI\%https://github.com/ShutdownRepo/hashonymize\fP
T}	T{
This small tool is aimed at anonymizing hashes files for offline but online cracking like Google Collab for instance (see \fI\%https://github.com/ShutdownRepo/google\-colab\-hashcat\fP).
T}
_
T{
Havoc
T}	T{
\fI\%https://github.com/HavocFramework/Havoc\fP
T}	T{
Command & Control Framework
T}
_
T{
hcxdumptool
T}	T{
\fI\%https://github.com/ZerBea/hcxdumptool\fP
T}	T{
Small tool to capture packets from wlan devices.
T}
_
T{
hcxtools
T}	T{
\fI\%https://github.com/ZerBea/hcxtools\fP
T}	T{
Tools for capturing and analyzing packets from WLAN devices.
T}
_
T{
hexedit
T}	T{
\fI\%https://github.com/pixel/hexedit\fP
T}	T{
View and edit binary files
T}
_
T{
holehe
T}	T{
\fI\%https://github.com/megadose/holehe\fP
T}	T{
mail osint tool finding out if it is used on websites.
T}
_
T{
hping3
T}	T{
\fI\%https://github.com/antirez/hping\fP
T}	T{
A network tool able to send custom TCP/IP packets
T}
_
T{
httpmethods
T}	T{
\fI\%https://github.com/ShutdownRepo/httpmethods\fP
T}	T{
Tool for exploiting HTTP methods (e.g. PUT / DELETE / etc.)
T}
_
T{
httprobe
T}	T{
\fI\%https://github.com/tomnomnom/httprobe\fP
T}	T{
A simple utility for enumerating HTTP and HTTPS servers.
T}
_
T{
httpx
T}	T{
\fI\%https://github.com/projectdiscovery/httpx\fP
T}	T{
A tool for identifying web technologies and vulnerabilities / including outdated software versions and weak encryption protocols.
T}
_
T{
hydra
T}	T{
\fI\%https://github.com/vanhauser\-thc/thc\-hydra\fP
T}	T{
Hydra is a parallelized login cracker which supports numerous protocols to attack.
T}
_
T{
ida
T}	T{
\fI\%https://www.hex\-rays.com/products/ida/\fP
T}	T{
Interactive disassembler for software analysis.
T}
_
T{
ignorant
T}	T{
\fI\%https://github.com/megadose/ignorant\fP
T}	T{
holehe but for phone numbers.
T}
_
T{
imagemagick
T}	T{
\fI\%https://github.com/ImageMagick/ImageMagick\fP
T}	T{
ImageMagick is a free and open\-source image manipulation tool used to create / edit / compose / or convert bitmap images.
T}
_
T{
impacket
T}	T{
\fI\%https://github.com/ThePorgs/impacket\fP
T}	T{
Set of tools for working with network protocols (ThePorgs version).
T}
_
T{
ipinfo
T}	T{
\fI\%https://github.com/ipinfo/cli\fP
T}	T{
Get information about an IP address or hostname.
T}
_
T{
iptables
T}	T{
\fI\%https://linux.die.net/man/8/iptables\fP
T}	T{
Userspace command line tool for configuring kernel firewall
T}
_
T{
jackit
T}	T{
\fI\%https://github.com/insecurityofthings/jackit\fP
T}	T{
Exploit to take over a wireless mouse and keyboard
T}
_
T{
jadx
T}	T{
\fI\%https://github.com/skylot/jadx\fP
T}	T{
Java decompiler
T}
_
T{
jd\-gui
T}	T{
\fI\%https://github.com/java\-decompiler/jd\-gui\fP
T}	T{
A standalone Java Decompiler GUI
T}
_
T{
jdwp
T}	T{
\fI\%https://github.com/IOActive/jdwp\-shellifier\fP
T}	T{
This exploitation script is meant to be used by pentesters against active JDWP service / in order to gain Remote Code Execution.
T}
_
T{
john
T}	T{
\fI\%https://github.com/openwall/john\fP
T}	T{
John the Ripper password cracker.
T}
_
T{
joomscan
T}	T{
\fI\%https://github.com/rezasp/joomscan\fP
T}	T{
A tool to enumerate Joomla\-based websites
T}
_
T{
jwt
T}	T{
\fI\%https://github.com/ticarpi/jwt_tool\fP
T}	T{
a command\-line tool for working with JSON Web Tokens (JWTs)
T}
_
T{
kadimus
T}	T{
\fI\%https://github.com/P0cL4bs/Kadimus\fP
T}	T{
a tool for detecting and exploiting file upload vulnerabilities
T}
_
T{
KeePwn
T}	T{
\fI\%https://github.com/Orange\-Cyberdefense/KeePwn\fP
T}	T{
KeePwn is a tool that extracts passwords from KeePass 1.x and 2.x databases.
T}
_
T{
kerbrute
T}	T{
\fI\%https://github.com/ropnop/kerbrute\fP
T}	T{
A tool to perform Kerberos pre\-auth bruteforcing
T}
_
T{
kiterunner
T}	T{
\fI\%https://github.com/assetnote/kiterunner\fP
T}	T{
Tool for operating Active Directory environments.
T}
_
T{
Kraken
T}	T{
\fI\%https://github.com/kraken\-ng/Kraken\fP
T}	T{
Kraken is a modular multi\-language webshell focused on web post\-exploitation and defense evasion. It supports three technologies (PHP / JSP and ASPX) and is core is developed in Python.
T}
_
T{
krbjack
T}	T{
\fI\%https://github.com/almandin/krbjack\fP
T}	T{
A Kerberos AP\-REQ hijacking tool with DNS unsecure updates abuse.
T}
_
T{
krbrelayx
T}	T{
\fI\%https://github.com/dirkjanm/krbrelayx\fP
T}	T{
a tool for performing Kerberos relay attacks
T}
_
T{
kubectl
T}	T{
\fI\%https://kubernetes.io/docs/reference/kubectl/overview/\fP
T}	T{
Command\-line interface for managing Kubernetes clusters.
T}
_
T{
ldapdomaindump
T}	T{
\fI\%https://github.com/dirkjanm/ldapdomaindump\fP
T}	T{
A tool for dumping domain data from an LDAP service
T}
_
T{
ldaprelayscan
T}	T{
\fI\%https://github.com/zyn3rgy/LdapRelayScan\fP
T}	T{
Check Domain Controllers for LDAP server protections regarding the relay of NTLM authentication.
T}
_
T{
ldapsearch
T}	T{
\fI\%https://wiki.debian.org/LDAP/LDAPUtils\fP
T}	T{
Search for and display entries (ldap)
T}
_
T{
ldapsearch\-ad
T}	T{
\fI\%https://github.com/yaap7/ldapsearch\-ad\fP
T}	T{
LDAP search utility with AD support
T}
_
T{
LDAPWordlistHarvester
T}	T{
\fI\%https://github.com/p0dalirius/LDAPWordlistHarvester\fP
T}	T{
Generate a wordlist from the information present in LDAP in order to crack passwords of domain accounts
T}
_
T{
ldeep
T}	T{
\fI\%https://github.com/franc\-pentest/ldeep\fP
T}	T{
ldeep is a tool to discover hidden paths on Web servers.
T}
_
T{
legba
T}	T{
\fI\%https://github.com/evilsocket/legba\fP
T}	T{
a multiprotocol credentials bruteforcer / password sprayer and enumerator built with Rust
T}
_
T{
libmspack
T}	T{
\fI\%https://github.com/kyz/libmspack\fP
T}	T{
C library for Microsoft compression formats.
T}
_
T{
libnfc
T}	T{
\fI\%https://github.com/grundid/nfctools\fP
T}	T{
Library for Near Field Communication (NFC) devices
T}
_
T{
libnfc\-crypto1\-crack
T}	T{
\fI\%https://github.com/droidnewbie2/acr122uNFC\fP
T}	T{
Implementation of cryptographic attack on Mifare Classic RFID cards
T}
_
T{
libusb\-dev
T}	T{
\fI\%https://github.com/libusb/libusb\fP
T}	T{
Library for USB device access
T}
_
T{
ligolo\-ng
T}	T{
\fI\%https://github.com/nicocha30/ligolo\-ng\fP
T}	T{
An advanced yet simple tunneling tool that uses a TUN interface.
T}
_
T{
linkedin2username
T}	T{
\fI\%https://github.com/initstring/linkedin2username\fP
T}	T{
Generate a list of LinkedIn usernames from a company name.
T}
_
T{
linkfinder
T}	T{
\fI\%https://github.com/GerbenJavado/LinkFinder\fP
T}	T{
a Python script that finds endpoints and their parameters in JavaScript files.
T}
_
T{
lnkup
T}	T{
\fI\%https://github.com/Plazmaz/lnkUp\fP
T}	T{
This tool will allow you to generate LNK payloads. Upon rendering or being run they will exfiltrate data.
T}
_
T{
lsassy
T}	T{
\fI\%https://github.com/Hackndo/lsassy\fP
T}	T{
Windows secrets and passwords extraction tool.
T}
_
T{
ltrace
T}	T{
\fI\%https://github.com/dkogan/ltrace\fP
T}	T{
ltrace is a debugging program for Linux and Unix that intercepts and records dynamic library calls that are called by an executed process.
T}
_
T{
maigret
T}	T{
\fI\%https://github.com/soxoj/maigret\fP
T}	T{
Collects information about a target email (or domain) from Google and Bing search results
T}
_
T{
maltego
T}	T{
\fI\%https://www.paterva.com/web7/downloads.php\fP
T}	T{
A tool used for open\-source intelligence and forensics
T}
_
T{
manspider
T}	T{
\fI\%https://github.com/blacklanternsecurity/MANSPIDER\fP
T}	T{
Manspider will crawl every share on every target system. If provided creds don’t work it will fall back to ‘guest’ then to a null session.
T}
_
T{
mariadb\-client
T}	T{
\fI\%https://github.com/MariaDB/server\fP
T}	T{
MariaDB is a community\-developed fork of the MySQL relational database management system. The mariadb\-client package includes command\-line utilities for interacting with a MariaDB server.
T}
_
T{
masky
T}	T{
\fI\%https://github.com/Z4kSec/masky\fP
T}	T{
masky is a tool to mask sensitive data / such as credit card numbers / in logs and other files.
T}
_
T{
masscan
T}	T{
\fI\%https://github.com/robertdavidgraham/masscan\fP
T}	T{
Masscan is an Internet\-scale port scanner
T}
_
T{
mdcat
T}	T{
\fI\%https://github.com/swsnr/mdcat\fP
T}	T{
Fancy cat for Markdown
T}
_
T{
metasploit
T}	T{
\fI\%https://github.com/rapid7/metasploit\-framework\fP
T}	T{
A popular penetration testing framework that includes many exploits and payloads
T}
_
T{
mfcuk
T}	T{
\fI\%https://github.com/nfc\-tools/mfcuk\fP
T}	T{
Implementation of an attack on Mifare Classic and Plus RFID cards
T}
_
T{
mfdread
T}	T{
\fI\%https://github.com/zhovner/mfdread\fP
T}	T{
Tool for reading/writing Mifare RFID tags
T}
_
T{
mfoc
T}	T{
\fI\%https://github.com/nfc\-tools/mfoc\fP
T}	T{
Implementation of ‘offline nested’ attack by Nethemba
T}
_
T{
minicom
T}	T{
\fI\%https://doc.ubuntu\-fr.org/minicom\fP
T}	T{
Minicom is a text\-based serial communication program for Unix\-like operating systems.
T}
_
T{
mitm6
T}	T{
\fI\%https://github.com/fox\-it/mitm6\fP
T}	T{
Tool to conduct a man\-in\-the\-middle attack against IPv6 protocols.
T}
_
T{
mobsf
T}	T{
\fI\%https://github.com/MobSF/Mobile\-Security\-Framework\-MobSF\fP
T}	T{
Automated and all\-in\-one mobile application (Android/iOS/Windows) pen\-testing malware analysis and security assessment framework
T}
_
T{
moodlescan
T}	T{
\fI\%https://github.com/inc0d3/moodlescan\fP
T}	T{
Scan Moodle sites for information and vulnerabilities.
T}
_
T{
mousejack
T}	T{
\fI\%https://github.com/BastilleResearch/mousejack\fP
T}	T{
Exploit to take over a wireless mouse and keyboard
T}
_
T{
msprobe
T}	T{
\fI\%https://github.com/puzzlepeaches/msprobe\fP
T}	T{
msprobe is a tool to identify Microsoft Windows hosts and servers that are running certain services.
T}
_
T{
MurMurHash
T}	T{
\fI\%https://github.com/QU35T\-code/MurMurHash\fP
T}	T{
This little tool is to calculate a MurmurHash value of a favicon to hunt phishing websites on the Shodan platform.
T}
_
T{
naabu
T}	T{
\fI\%https://github.com/projectdiscovery/naabu\fP
T}	T{
A fast and reliable port scanner that can detect open ports and services.
T}
_
T{
name\-that\-hash
T}	T{
\fI\%https://github.com/HashPals/Name\-That\-Hash\fP
T}	T{
Online tool for identifying hashes.
T}
_
T{
nasm
T}	T{
\fI\%https://github.com/netwide\-assembler/nasm\fP
T}	T{
NASM is an 80x86 assembler designed for portability and modularity.
T}
_
T{
nbtscan
T}	T{
\fI\%https://github.com/charlesroelli/nbtscan\fP
T}	T{
NBTscan is a program for scanning IP networks for NetBIOS name information.
T}
_
T{
neo4j
T}	T{
\fI\%https://github.com/neo4j/neo4j\fP
T}	T{
Database.
T}
_
T{
neovim
T}	T{
\fI\%https://neovim.io/\fP
T}	T{
hyperextensible Vim\-based text editor
T}
_
T{
netdiscover
T}	T{
\fI\%https://github.com/netdiscover\-scanner/netdiscover\fP
T}	T{
netdiscover is an active/passive address reconnaissance tool
T}
_
T{
netexec
T}	T{
\fI\%https://github.com/Pennyw0rth/NetExec\fP
T}	T{
Network scanner (Crackmapexec updated).
T}
_
T{
nfct
T}	T{
\fI\%https://github.com/grundid/nfctools\fP
T}	T{
Tool for Near Field Communication (NFC) devices
T}
_
T{
ngrok
T}	T{
\fI\%https://github.com/inconshreveable/ngrok\fP
T}	T{
Expose a local server behind a NAT or firewall to the internet
T}
_
T{
nmap
T}	T{
\fI\%https://nmap.org\fP
T}	T{
The Network Mapper \- a powerful network discovery and security auditing tool
T}
_
T{
nmap\-parse\-ouptut
T}	T{
\fI\%https://github.com/ernw/nmap\-parse\-output\fP
T}	T{
Converts/manipulates/extracts data from a Nmap scan output.
T}
_
T{
noPac
T}	T{
\fI\%https://github.com/Ridter/noPac\fP
T}	T{
Exploiting CVE\-2021\-42278 and CVE\-2021\-42287 to impersonate DA from standard domain user.
T}
_
T{
nosqlmap
T}	T{
\fI\%https://github.com/codingo/NoSQLMap\fP
T}	T{
a Python tool for testing NoSQL databases for security vulnerabilities.
T}
_
T{
ntlmv1\-multi
T}	T{
\fI\%https://github.com/evilmog/ntlmv1\-multi\fP
T}	T{
Exploit a vulnerability in Microsoft Windows to gain system\-level access.
T}
_
T{
ntlm_theft
T}	T{
\fI\%https://github.com/Greenwolf/ntlm_theft\fP
T}	T{
A tool for generating multiple types of NTLMv2 hash theft files
T}
_
T{
nuclei
T}	T{
\fI\%https://github.com/projectdiscovery/nuclei\fP
T}	T{
A fast and customizable vulnerability scanner that can detect a wide range of issues / including XSS / SQL injection / and misconfigured servers.
T}
_
T{
oaburl
T}	T{
\fI\%https://gist.githubusercontent.com/snovvcrash/4e76aaf2a8750922f546eed81aa51438/raw/96ec2f68a905eed4d519d9734e62edba96fd15ff/oaburl.py\fP
T}	T{
Find Open redirects and other vulnerabilities.
T}
_
T{
objection
T}	T{
\fI\%https://github.com/sensepost/objection\fP
T}	T{
Runtime mobile exploration
T}
_
T{
objectwalker
T}	T{
\fI\%https://github.com/p0dalirius/objectwalker\fP
T}	T{
A python module to explore the object tree to extract paths to interesting objects in memory.
T}
_
T{
oneforall
T}	T{
\fI\%https://github.com/shmilylty/OneForAll\fP
T}	T{
a powerful subdomain collection tool.
T}
_
T{
onesixtyone
T}	T{
\fI\%https://github.com/trailofbits/onesixtyone\fP
T}	T{
onesixtyone is an SNMP scanner which utilizes a sweep technique to achieve very high performance.
T}
_
T{
osrframework
T}	T{
\fI\%https://github.com/i3visio/osrframework\fP
T}	T{
Include references to a bunch of different applications related to username checking / DNS lookups / information leaks research / deep web search / regular expressions extraction and many others.
T}
_
T{
pass
T}	T{
\fI\%https://github.com/hashcat/hashcat\fP
T}	T{
TODO
T}
_
T{
PassTheCert
T}	T{
\fI\%https://github.com/AlmondOffSec/PassTheCert\fP
T}	T{
PassTheCert is a tool to extract Active Directory user password hashes from a domain controller’s local certificate store.
T}
_
T{
patator
T}	T{
\fI\%https://github.com/lanjelot/patator\fP
T}	T{
Login scanner.
T}
_
T{
pcredz
T}	T{
\fI\%https://github.com/lgandx/PCredz\fP
T}	T{
PowerShell credential dumper
T}
_
T{
pcsc
T}	T{
\fI\%https://pcsclite.apdu.fr/\fP
T}	T{
Middleware for smart card readers
T}
_
T{
pdfcrack
T}	T{
\fI\%https://github.com/robins/pdfcrack\fP
T}	T{
A tool for cracking password\-protected PDF files
T}
_
T{
peepdf
T}	T{
\fI\%https://github.com/jesparza/peepdf\fP
T}	T{
peepdf is a Python tool to explore PDF files in order to find out if the file can be harmful or not.
T}
_
T{
petitpotam
T}	T{
\fI\%https://github.com/topotam/PetitPotam\fP
T}	T{
Windows machine account manipulation
T}
_
T{
phoneinfoga
T}	T{
\fI\%https://github.com/sundowndev/PhoneInfoga\fP
T}	T{
Information gathering & OSINT framework for phone numbers.
T}
_
T{
photon
T}	T{
\fI\%https://github.com/s0md3v/Photon\fP
T}	T{
a fast web crawler which extracts URLs / files / intel & endpoints from a target.
T}
_
T{
PHP filter chain generator
T}	T{
\fI\%https://github.com/synacktiv/php_filter_chain_generator\fP
T}	T{
A CLI to generate PHP filters chain / get your RCE without uploading a file if you control entirely the parameter passed to a require or an include in PHP!
T}
_
T{
phpggc
T}	T{
\fI\%https://github.com/ambionics/phpggc\fP
T}	T{
Exploit generation tool for the PHP platform.
T}
_
T{
pkcrack
T}	T{
\fI\%https://github.com/keyunluo/pkcrack\fP
T}	T{
tool to generate wordlists of passwords containing cities at a defined distance around the client city
T}
_
T{
pkinittools
T}	T{
\fI\%https://github.com/dirkjanm/PKINITtools\fP
T}	T{
Pkinit support tools
T}
_
T{
polenum
T}	T{
\fI\%https://github.com/Wh1t3Fox/polenum\fP
T}	T{
Polenum is a Python script which uses the Impacket library to extract user information through the SMB protocol.
T}
_
T{
powershell
T}	T{
\fI\%https://github.com/PowerShell/PowerShell\fP
T}	T{
a command\-line shell and scripting language designed for system administration and automation
T}
_
T{
pp\-finder
T}	T{
\fI\%https://github.com/yeswehack/pp\-finder\fP
T}	T{
Prototype pollution finder tool for javascript. pp\-finder lets you find prototype pollution candidates in your code.
T}
_
T{
pre2k
T}	T{
\fI\%https://github.com/garrettfoster13/pre2k\fP
T}	T{
pre2k is a tool to check if a Windows domain has any pre\-2000 Windows 2000 logon names still in use.
T}
_
T{
prips
T}	T{
\fI\%https://manpages.ubuntu.com/manpages/focal/man1/prips.1.html\fP
T}	T{
A utility for quickly generating IP ranges or enumerating hosts within a specified range.
T}
_
T{
privexchange
T}	T{
\fI\%https://github.com/dirkjanm/PrivExchange\fP
T}	T{
a tool to perform attacks against Microsoft Exchange server using NTLM relay techniques
T}
_
T{
prowler
T}	T{
\fI\%https://github.com/prowler\-cloud/prowler\fP
T}	T{
Perform Cloud Security best practices assessments / audits / incident response / compliance / continuous monitoring / hardening and forensics readiness.
T}
_
T{
proxmark3
T}	T{
\fI\%https://github.com/Proxmark/proxmark3\fP
T}	T{
Open source RFID research toolkit.
T}
_
T{
proxychains
T}	T{
\fI\%https://github.com/rofl0r/proxychains\fP
T}	T{
Proxy chains \- redirect connections through proxy servers.
T}
_
T{
pst\-utils
T}	T{
\fI\%https://manpages.debian.org/jessie/pst\-utils/readpst.1\fP
T}	T{
pst\-utils is a set of tools for working with Outlook PST files.
T}
_
T{
pth\-tools
T}	T{
\fI\%https://github.com/byt3bl33d3r/pth\-toolkit\fP
T}	T{
A toolkit to perform pass\-the\-hash attacks
T}
_
T{
pwncat
T}	T{
\fI\%https://github.com/calebstewart/pwncat\fP
T}	T{
A lightweight and versatile netcat alternative that includes various additional features.
T}
_
T{
pwndb
T}	T{
\fI\%https://github.com/davidtavarez/pwndb\fP
T}	T{
A command\-line tool for searching the pwndb database of compromised credentials.
T}
_
T{
pwndbg
T}	T{
\fI\%https://github.com/pwndbg/pwndbg\fP
T}	T{
a GDB plugin that makes debugging with GDB suck less
T}
_
T{
pwnedornot
T}	T{
\fI\%https://github.com/thewhiteh4t/pwnedOrNot\fP
T}	T{
Check if a password has been leaked in a data breach.
T}
_
T{
pwninit
T}	T{
\fI\%https://github.com/io12/pwninit\fP
T}	T{
A tool for automating starting binary exploit challenges
T}
_
T{
pwntools
T}	T{
\fI\%https://github.com/Gallopsled/pwntools\fP
T}	T{
a CTF framework and exploit development library
T}
_
T{
pygpoabuse
T}	T{
\fI\%https://github.com/Hackndo/pyGPOAbuse\fP
T}	T{
A tool for abusing GPO permissions to escalate privileges
T}
_
T{
pykek
T}	T{
\fI\%https://github.com/preempt/pykek\fP
T}	T{
PyKEK (Python Kerberos Exploitation Kit) a python library to manipulate KRB5\-related data.
T}
_
T{
pylaps
T}	T{
\fI\%https://github.com/p0dalirius/pylaps\fP
T}	T{
Utility for enumerating and querying LDAP servers.
T}
_
T{
pymeta
T}	T{
\fI\%https://github.com/m8sec/pymeta\fP
T}	T{
Google and Bing scraping osint tool
T}
_
T{
pypykatz
T}	T{
\fI\%https://github.com/skelsec/pypykatz\fP
T}	T{
a Python library for mimikatz\-like functionality
T}
_
T{
pyrit
T}	T{
\fI\%https://github.com/JPaulMora/Pyrit\fP
T}	T{
Python\-based WPA/WPA2\-PSK attack tool.
T}
_
T{
pywerview
T}	T{
\fI\%https://github.com/the\-useless\-one/pywerview\fP
T}	T{
A (partial) Python rewriting of PowerSploit’s PowerView.
T}
_
T{
pywhisker
T}	T{
\fI\%https://github.com/ShutdownRepo/pywhisker\fP
T}	T{
PyWhisker is a Python equivalent of the original Whisker made by Elad Shamir and written in C#. This tool allows users to manipulate the msDS\-KeyCredentialLink attribute of a target user/computer to obtain full control over that object. It’s based on Impacket and on a Python equivalent of Michael Grafnetter’s DSInternals called PyDSInternals made by podalirius.
T}
_
T{
pywsus
T}	T{
\fI\%https://github.com/GoSecure/pywsus\fP
T}	T{
Python implementation of a WSUS client
T}
_
T{
radare2
T}	T{
\fI\%https://github.com/radareorg/radare2\fP
T}	T{
A complete framework for reverse\-engineering and analyzing binaries
T}
_
T{
rdesktop
T}	T{
\fI\%https://github.com/rdesktop/rdesktop\fP
T}	T{
rdesktop is a client for Remote Desktop Protocol (RDP) used in a number of Microsoft products including Windows NT Terminal Server / Windows 2000 Server / Windows XP and Windows 2003 Server.
T}
_
T{
reaver
T}	T{
\fI\%https://github.com/t6x/reaver\-wps\-fork\-t6x\fP
T}	T{
reaver is a tool for brute\-forcing WPS (Wireless Protected Setup) PINs.
T}
_
T{
recon\-ng
T}	T{
\fI\%https://github.com/lanmaster53/recon\-ng\fP
T}	T{
External recon tool.
T}
_
T{
recondog
T}	T{
\fI\%https://github.com/s0md3v/ReconDog\fP
T}	T{
a reconnaissance tool for performing information gathering on a target.
T}
_
T{
redis\-tools
T}	T{
\fI\%https://github.com/antirez/redis\-tools\fP
T}	T{
redis\-tools is a collection of Redis client utilities including redis\-cli and redis\-benchmark.
T}
_
T{
remmina
T}	T{
\fI\%https://github.com/FreeRDP/Remmina\fP
T}	T{
Remote desktop client.
T}
_
T{
responder
T}	T{
\fI\%https://github.com/lgandx/Responder\fP
T}	T{
a LLMNR / NBT\-NS and MDNS poisoner.
T}
_
T{
rlwrap
T}	T{
\fI\%https://github.com/hanslub42/rlwrap\fP
T}	T{
rlwrap is a small utility that wraps input and output streams of executables / making it possible to edit and re\-run input history
T}
_
T{
ROADtools
T}	T{
\fI\%https://github.com/dirkjanm/ROADtools\fP
T}	T{
ROADtools is a framework to interact with Azure AD. It consists of a library (roadlib) with common components / the ROADrecon Azure AD exploration tool and the ROADtools Token eXchange (roadtx) tool.
T}
_
T{
roastinthemiddle
T}	T{
\fI\%https://github.com/Tw1sm/RITM\fP
T}	T{
RoastInTheMiddle is a tool to intercept and relay NTLM authentication requests.
T}
_
T{
robotstester
T}	T{
\fI\%https://github.com/p0dalirius/robotstester\fP
T}	T{
Utility for testing whether a website’s robots.txt file is correctly configured.
T}
_
T{
routersploit
T}	T{
\fI\%https://github.com/threat9/routersploit\fP
T}	T{
Security audit tool for routers.
T}
_
T{
RsaCracker
T}	T{
\fI\%https://github.com/skyf0l/RsaCracker\fP
T}	T{
Powerful RSA cracker for CTFs. Supports RSA \- X509 \- OPENSSH in PEM and DER formats.
T}
_
T{
rsactftool
T}	T{
\fI\%https://github.com/RsaCtfTool/RsaCtfTool\fP
T}	T{
The rsactftool tool is used for RSA cryptographic operations and analysis.
T}
_
T{
rsync
T}	T{
\fI\%https://packages.debian.org/sid/rsync\fP
T}	T{
File synchronization tool for efficiently copying and updating data between local or remote locations
T}
_
T{
rtl\-433
T}	T{
\fI\%https://github.com/merbanan/rtl_433\fP
T}	T{
Tool for decoding various wireless protocols/ signals such as those used by weather stations
T}
_
T{
ruler
T}	T{
\fI\%https://github.com/sensepost/ruler\fP
T}	T{
Outlook Rules exploitation framework.
T}
_
T{
rusthound (v2)
T}	T{
\fI\%https://github.com/OPENCYBER\-FR/RustHound\fP
T}	T{
BloodHound\-CE ingestor in Rust.
T}
_
T{
rusthound
T}	T{
\fI\%https://github.com/OPENCYBER\-FR/RustHound\fP
T}	T{
BloodHound ingestor in Rust.
T}
_
T{
rustscan
T}	T{
\fI\%https://github.com/RustScan/RustScan\fP
T}	T{
The Modern Port Scanner
T}
_
T{
samdump2
T}	T{
\fI\%https://github.com/azan121468/SAMdump2\fP
T}	T{
A tool to dump Windows NT/2k/XP/Vista password hashes from SAM files
T}
_
T{
scout
T}	T{
\fI\%https://github.com/nccgroup/ScoutSuite\fP
T}	T{
Scout Suite is an open source multi\-cloud security\-auditing tool which enables security posture assessment of cloud environments.
T}
_
T{
scrcpy
T}	T{
\fI\%https://github.com/Genymobile/scrcpy\fP
T}	T{
Display and control your Android device.
T}
_
T{
searchsploit
T}	T{
\fI\%https://gitlab.com/exploit\-database/exploitdb\fP
T}	T{
A command line search tool for Exploit\-DB
T}
_
T{
seclists
T}	T{
\fI\%https://github.com/danielmiessler/SecLists\fP
T}	T{
A collection of multiple types of lists used during security assessments
T}
_
T{
semgrep
T}	T{
\fI\%https://github.com/returntocorp/semgrep/\fP
T}	T{
Static analysis tool that supports multiple languages and can find a variety of vulnerabilities and coding errors.
T}
_
T{
shadowcoerce
T}	T{
\fI\%https://github.com/ShutdownRepo/shadowcoerce\fP
T}	T{
Utility for bypassing the Windows Defender antivirus by hiding a process within a legitimate process.
T}
_
T{
shellerator
T}	T{
\fI\%https://github.com/ShutdownRepo/Shellerator\fP
T}	T{
a simple command\-line tool for generating shellcode
T}
_
T{
Sherlock
T}	T{
\fI\%https://github.com/sherlock\-project/sherlock\fP
T}	T{
Hunt down social media accounts by username across social networks.
T}
_
T{
shuffledns
T}	T{
\fI\%https://github.com/projectdiscovery/shuffledns\fP
T}	T{
A fast and customizable DNS resolver that can be used for subdomain enumeration and other tasks.
T}
_
T{
simplyemail
T}	T{
\fI\%https://github.com/SimplySecurity/SimplyEmail\fP
T}	T{
a scriptable command line tool for sending emails
T}
_
T{
sipvicious
T}	T{
\fI\%https://github.com/enablesecurity/sipvicious\fP
T}	T{
Enumeration and MITM tool for SIP devices
T}
_
T{
sleuthkit
T}	T{
\fI\%https://github.com/sleuthkit/sleuthkit\fP
T}	T{
Forensic toolkit to analyze volume and file system data
T}
_
T{
sliver
T}	T{
\fI\%https://github.com/BishopFox/sliver\fP
T}	T{
Open source / cross\-platform and extensible C2 framework
T}
_
T{
smali
T}	T{
\fI\%https://github.com/JesusFreke/smali\fP
T}	T{
A tool to disassemble and assemble Android’s dex files
T}
_
T{
smartbrute
T}	T{
\fI\%https://github.com/ShutdownRepo/SmartBrute\fP
T}	T{
The smart password spraying and bruteforcing tool for Active Directory Domain Services.
T}
_
T{
smbclient
T}	T{
\fI\%https://github.com/samba\-team/samba\fP
T}	T{
SMBclient is a command\-line utility that allows you to access Windows shared resources
T}
_
T{
smbmap
T}	T{
\fI\%https://github.com/ShawnDEvans/smbmap\fP
T}	T{
A tool to enumerate SMB shares and check for null sessions
T}
_
T{
smtp\-user\-enum
T}	T{
\fI\%https://github.com/pentestmonkey/smtp\-user\-enum\fP
T}	T{
A tool to enumerate email addresses via SMTP
T}
_
T{
smuggler
T}	T{
\fI\%https://github.com/defparam/smuggler\fP
T}	T{
Smuggler is a tool that helps pentesters and red teamers to smuggle data into and out of the network even when there are multiple layers of security in place.
T}
_
T{
SoapUI
T}	T{
\fI\%https://github.com/SmartBear/soapui\fP
T}	T{
SoapUI is the world’s leading testing tool for API testing.
T}
_
T{
spiderfoot
T}	T{
\fI\%https://github.com/smicallef/spiderfoot\fP
T}	T{
A reconnaissance tool that automatically queries over 100 public data sources
T}
_
T{
sprayhound
T}	T{
\fI\%https://github.com/Hackndo/Sprayhound\fP
T}	T{
Active Directory password audit tool.
T}
_
T{
sqlmap
T}	T{
\fI\%https://github.com/sqlmapproject/sqlmap\fP
T}	T{
Sqlmap is an open\-source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws
T}
_
T{
ssh\-audit
T}	T{
\fI\%https://github.com/arthepsy/ssh\-audit\fP
T}	T{
ssh\-audit is a tool to test SSH server configuration for best practices.
T}
_
T{
sshuttle
T}	T{
\fI\%https://github.com/sshuttle/sshuttle\fP
T}	T{
Transparent proxy server that tunnels traffic through an SSH server
T}
_
T{
sslscan
T}	T{
\fI\%https://github.com/rbsec/sslscan\fP
T}	T{
a tool for testing SSL/TLS encryption on servers
T}
_
T{
ssrfmap
T}	T{
\fI\%https://github.com/swisskyrepo/SSRFmap\fP
T}	T{
a tool for testing SSRF vulnerabilities.
T}
_
T{
steghide
T}	T{
\fI\%https://github.com/StefanoDeVuono/steghide\fP
T}	T{
steghide is a steganography program that is able to hide data in various kinds of image and audio files.
T}
_
T{
stegolsb
T}	T{
\fI\%https://github.com/KyTn/STEGOLSB\fP
T}	T{
Steganography tool to hide data in BMP images using least significant bit algorithm
T}
_
T{
stegosuite
T}	T{
\fI\%https://github.com/osde8info/stegosuite\fP
T}	T{
Stegosuite is a free steganography tool that allows you to hide data in image and audio files.
T}
_
T{
strace
T}	T{
\fI\%https://github.com/strace/strace\fP
T}	T{
strace is a debugging utility for Linux that allows you to monitor and diagnose system calls made by a process.
T}
_
T{
subfinder
T}	T{
\fI\%https://github.com/projectdiscovery/subfinder\fP
T}	T{
Tool to find subdomains associated with a domain.
T}
_
T{
sublist3r
T}	T{
\fI\%https://github.com/aboul3la/Sublist3r\fP
T}	T{
a Python tool designed to enumerate subdomains of websites.
T}
_
T{
swaks
T}	T{
\fI\%https://github.com/jetmore/swaks\fP
T}	T{
Swaks is a featureful flexible scriptable transaction\-oriented SMTP test tool.
T}
_
T{
symfony\-exploits
T}	T{
\fI\%https://github.com/ambionics/symfony\-exploits\fP
T}	T{
Collection of Symfony exploits and PoCs.
T}
_
T{
tailscale
T}	T{
\fI\%https://github.com/tailscale/tailscale\fP
T}	T{
A secure and easy\-to\-use VPN alternative that is designed for teams and businesses.
T}
_
T{
targetedKerberoast
T}	T{
\fI\%https://github.com/ShutdownRepo/targetedKerberoast\fP
T}	T{
Kerberoasting against specific accounts
T}
_
T{
tcpdump
T}	T{
\fI\%https://github.com/the\-tcpdump\-group/tcpdump\fP
T}	T{
a powerful command\-line packet analyzer for Unix\-like systems
T}
_
T{
TeamsPhisher
T}	T{
\fI\%https://github.com/Octoberfest7/TeamsPhisher\fP
T}	T{
TeamsPhisher is a Python3 program that facilitates the delivery of phishing messages and attachments to Microsoft Teams users whose organizations allow external communications.
T}
_
T{
testdisk
T}	T{
\fI\%https://github.com/cgsecurity/testdisk\fP
T}	T{
Partition recovery and file undelete utility
T}
_
T{
testssl
T}	T{
\fI\%https://github.com/drwetter/testssl.sh\fP
T}	T{
a tool for testing SSL/TLS encryption on servers
T}
_
T{
theharvester
T}	T{
\fI\%https://github.com/laramies/theHarvester\fP
T}	T{
Tool for gathering e\-mail accounts / subdomain names / virtual host / open ports / banners / and employee names from different public sources
T}
_
T{
tig
T}	T{
\fI\%https://github.com/jonas/tig\fP
T}	T{
Tig is an ncurses\-based text\-mode interface for git.
T}
_
T{
timing
T}	T{
\fI\%https://github.com/ffleming/timing_attack\fP
T}	T{
Tool to generate a timing profile for a given command.
T}
_
T{
tls\-map
T}	T{
\fI\%https://github.com/sec\-it/tls\-map\fP
T}	T{
tls\-map is a library for mapping TLS cipher algorithm names.
T}
_
T{
tls\-scanner
T}	T{
\fI\%https://github.com/tls\-attacker/tls\-scanner\fP
T}	T{
a simple script to check the security of a remote TLS/SSL web server
T}
_
T{
tomcatwardeployer
T}	T{
\fI\%https://github.com/mgeeky/tomcatwardeployer\fP
T}	T{
Script to deploy war file in Tomcat.
T}
_
T{
tor
T}	T{
\fI\%https://github.com/torproject/tor\fP
T}	T{
Anonymity tool that can help protect your privacy and online identity by routing your traffic through a network of servers.
T}
_
T{
toutatis
T}	T{
\fI\%https://github.com/megadose/Toutatis\fP
T}	T{
Toutatis is a tool that allows you to extract information from instagrams accounts such as e\-mails / phone numbers and more.
T}
_
T{
traceroute
T}	T{
\fI\%https://github.com/iputils/iputils\fP
T}	T{
Traceroute is a command which can show you the path a packet of information takes from your computer to one you specify.
T}
_
T{
trevorspray
T}	T{
\fI\%https://github.com/blacklanternsecurity/TREVORspray\fP
T}	T{
TREVORspray is a modular password sprayer with threading SSH proxying loot modules / and more
T}
_
T{
trid
T}	T{
\fI\%https://mark0.net/soft\-trid\-e.html\fP
T}	T{
File identifier
T}
_
T{
trilium
T}	T{
\fI\%https://github.com/zadam/trilium\fP
T}	T{
Personal knowledge management system.
T}
_
T{
tshark
T}	T{
\fI\%https://github.com/wireshark/wireshark\fP
T}	T{
TShark is a terminal version of Wireshark.
T}
_
T{
uberfile
T}	T{
\fI\%https://github.com/ShutdownRepo/Uberfile\fP
T}	T{
Uberfile is a simple command\-line tool aimed to help pentesters quickly generate file downloader one\-liners in multiple contexts (wget / curl / powershell / certutil…). This project code is based on my other similar project for one\-liner reverseshell generation Shellerator.
T}
_
T{
updog
T}	T{
\fI\%https://github.com/sc0tfree/updog\fP
T}	T{
Simple replacement for Python’s SimpleHTTPServer.
T}
_
T{
upx
T}	T{
\fI\%https://github.com/upx/upx\fP
T}	T{
UPX is an advanced executable packer
T}
_
T{
username\-anarchy
T}	T{
\fI\%https://github.com/urbanadventurer/username\-anarchy\fP
T}	T{
Tools for generating usernames when penetration testing. Usernames are half the password brute force problem.
T}
_
T{
Villain
T}	T{
\fI\%https://github.com/t3l3machus/Villain\fP
T}	T{
Command & Control Framework
T}
_
T{
volatility2
T}	T{
\fI\%https://github.com/volatilityfoundation/volatility\fP
T}	T{
Volatile memory extraction utility framework
T}
_
T{
volatility3
T}	T{
\fI\%https://github.com/volatilityfoundation/volatility3\fP
T}	T{
Advanced memory forensics framework
T}
_
T{
wabt
T}	T{
\fI\%https://github.com/WebAssembly/wabt\fP
T}	T{
The WebAssembly Binary Toolkit (WABT) is a suite of tools for WebAssembly (Wasm) including assembler and disassembler / a syntax checker / and a binary format validator.
T}
_
T{
wafw00f
T}	T{
\fI\%https://github.com/EnableSecurity/wafw00f\fP
T}	T{
a Python tool that helps to identify and fingerprint web application firewall (WAF) products.
T}
_
T{
waybackurls
T}	T{
\fI\%https://github.com/tomnomnom/waybackurls\fP
T}	T{
Fetch all the URLs that the Wayback Machine knows about for a domain.
T}
_
T{
webclientservicescanner
T}	T{
\fI\%https://github.com/Hackndo/webclientservicescanner\fP
T}	T{
Scans for web service endpoints
T}
_
T{
weevely
T}	T{
\fI\%https://github.com/epinna/weevely3\fP
T}	T{
a webshell designed for post\-exploitation purposes that can be extended over the network at runtime.
T}
_
T{
wfuzz
T}	T{
\fI\%https://github.com/xmendez/wfuzz\fP
T}	T{
WFuzz is a web application vulnerability scanner that allows you to find vulnerabilities using a wide range of attack payloads and fuzzing techniques
T}
_
T{
whatportis
T}	T{
\fI\%https://github.com/ncrocfer/whatportis\fP
T}	T{
Command\-line tool to lookup port information
T}
_
T{
whatweb
T}	T{
\fI\%https://github.com/urbanadventurer/WhatWeb\fP
T}	T{
Next generation web scanner that identifies what websites are running.
T}
_
T{
whois
T}	T{
\fI\%https://packages.debian.org/sid/whois\fP
T}	T{
See information about a specific domain name or IP address.
T}
_
T{
wifite2
T}	T{
\fI\%https://github.com/derv82/wifite2\fP
T}	T{
Script for auditing wireless networks.
T}
_
T{
windapsearch\-go
T}	T{
\fI\%https://github.com/ropnop/go\-windapsearch/\fP
T}	T{
Active Directory enumeration tool.
T}
_
T{
wireshark
T}	T{
\fI\%https://github.com/wireshark/wireshark\fP
T}	T{
Wireshark is a network protocol analyzer that lets you see what’s happening on your network at a microscopic level.
T}
_
T{
wpscan
T}	T{
\fI\%https://github.com/wpscanteam/wpscan\fP
T}	T{
A tool to enumerate WordPress\-based websites
T}
_
T{
wuzz
T}	T{
\fI\%https://github.com/asciimoo/wuzz\fP
T}	T{
a command\-line tool for interacting with HTTP(S) web services
T}
_
T{
XSpear
T}	T{
\fI\%https://github.com/hahwul/XSpear\fP
T}	T{
a powerful XSS scanning and exploitation tool.
T}
_
T{
xsrfprobe
T}	T{
\fI\%https://github.com/0xInfection/XSRFProbe\fP
T}	T{
a tool for detecting and exploiting Cross\-Site Request Forgery (CSRF) vulnerabilities
T}
_
T{
xsser
T}	T{
\fI\%https://github.com/epsylon/xsser\fP
T}	T{
XSS scanner.
T}
_
T{
xsstrike
T}	T{
\fI\%https://github.com/s0md3v/XSStrike\fP
T}	T{
a Python tool for detecting and exploiting XSS vulnerabilities.
T}
_
T{
xtightvncviewer
T}	T{
\fI\%https://www.commandlinux.com/man\-page/man1/xtightvncviewer.1.html\fP
T}	T{
xtightvncviewer is an open source VNC client software.
T}
_
T{
Yalis
T}	T{
\fI\%https://github.com/EatonChips/yalis\fP
T}	T{
Yet Another LinkedIn Scraper
T}
_
T{
youtubedl
T}	T{
\fI\%https://github.com/ytdl\-org/youtube\-dl\fP
T}	T{
Download videos from YouTube and other sites.
T}
_
T{
ysoserial
T}	T{
\fI\%https://github.com/frohoff/ysoserial\fP
T}	T{
A proof\-of\-concept tool for generating payloads that exploit unsafe Java object deserialization.
T}
_
T{
yt\-dlp
T}	T{
\fI\%https://github.com/yt\-dlp/yt\-dlp\fP
T}	T{
A youtube\-dl fork with additional features and fixes
T}
_
T{
zerologon
T}	T{
\fI\%https://github.com/SecuraBV/CVE\-2020\-1472\fP
T}	T{
Exploit for the Zerologon vulnerability (CVE\-2020\-1472).
T}
_
T{
zipalign
T}	T{
\fI\%https://developer.android.com/studio/command\-line/zipalign\fP
T}	T{
arguably the most important step to optimize your APK file
T}
_
T{
zsteg
T}	T{
\fI\%https://github.com/zed\-0xff/zsteg\fP
T}	T{
Detect steganography hidden in PNG and BMP images
T}
_
.TE
.SS My resources
.sp
“My\-resources” brings great features allowing users to make Exegol their own and customize it even further. This feature relies on a simple volume shared between the host and all exegol containers, and an advanced integration in the Exegol images directly.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The “my\-resources” feature will do what it’s told to do. If users choose to use that feature to replace files or configuration, those replacements should take place. So if there are some additions to Exegol you’re not getting, it could be because you have a “my\-resources” setup that replaces it.
.UNINDENT
.UNINDENT
.sp
To learn more about the volume options, details are available \fI\%here\fP\&.
.sp
Below are the features offered by “My\-resources”, allowing users to extend Exegol beyond what is initially included (\fI\%tools\fP, \fI\%resources\fP).
.INDENT 0.0
.IP \(bu 2
\fI\%Custom tools\fP: users can place their own custom standalone tools, binaries and scripts in the “my\-resources” volume. This volume is accessible from all containers at \fB/opt/my\-resources\fP\&.
.IP \(bu 2
\fI\%Supported setups\fP: users can customize their exegol environments automatically and transparently without having to manually setting things up for each and every new Exegol container they create. In this functionality, a pre\-set list of supported custom configuration is set, and will improve with time. It’s the easier and most user\-friendly approach to customizing a few configurations.
.IP \(bu 2
\fI\%User setup\fP: In this functionality, a shell script can be populated with every command a user wishes its containers to run at their creation.
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fI\%Custom tools\fP
.IP \(bu 2
\fI\%Supported setups\fP
.INDENT 2.0
.IP \(bu 2
\fI\%apt (packages, sources, keys)\fP
.IP \(bu 2
\fI\%bloodhound (customqueries, config)\fP
.IP \(bu 2
\fI\%firefox (addons, CA)\fP
.IP \(bu 2
\fI\%python3 (pip3)\fP
.IP \(bu 2
\fI\%tmux (conf)\fP
.IP \(bu 2
\fI\%vim (vimrc, configs)\fP
.IP \(bu 2
\fI\%neovim (.config/nvim)\fP
.IP \(bu 2
\fI\%zsh (aliases, zshrc, history)\fP
.UNINDENT
.IP \(bu 2
\fI\%User setup\fP
.IP \(bu 2
\fI\%Troubleshooting\fP
.UNINDENT
.SS Custom tools
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Available from version \fB3.0.0\fP of any exegol image.
.UNINDENT
.UNINDENT
.sp
In the container, the \fB/opt/my\-resources/bin/\fP folder (\fB~/.exegol/my\-resources/bin/\fP on the host) is automatically added to the \fBPATH\fP of the zsh shell. The user can then add tools in that folder in order to use them from the container.
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
The most simple approach would be to add standalone binaries, but users could also add symbolic links that would point to somewhere else in \fB/opt/my\-resources/\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Example for a standalone binary
cp /path/to/tool ~/.exegol/my\-resources/bin/

# Example for a symbolic link
git \-C ~/.exegol/my\-resources/ clone \(dqhttps://github.com/someauthor/sometool\(dq
ln \-s ~/.exegol/my\-resources/sometool/script.py ~/.exegol/my\-resources/bin/script.py
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Supported setups
.sp
Configuration files stored in the \fB/opt/my\-resources/setup/\fP directory will be deployed on the containers and allow users to customize Exegol even further.
By default, the number of officially supported configuration files is limited, and it depends on the version of the image itself, not the wrapper.
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
In order to see what configuration files are supported in your version, the \fB/opt/supported_setups.md\fP documentation file can be read from any container.
.UNINDENT
.UNINDENT
.sp
This documentation will reference in detail all the supported customizations available over time, and the corresponding minimum image version required for each one.
.sp
If a user wants to deploy tools and configurations that are not supported, or more advanced, they can opt for the \fI\%User setup solution\fP\&.
.SS \fBapt\fP (packages, sources, keys)
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Available from version \fB3.0.0\fP of any exegol image.
.UNINDENT
.UNINDENT
.sp
A system exists to easily install arbitrary APT packages in any new exegol container.
.INDENT 0.0
.IP \(bu 2
Custom APT \fBrepositories\fP can be added in exegol by filling in the \fB/opt/my\-resources/setup/apt/sources.list\fP file
.IP \(bu 2
Importing custom repositories usually requires importing \fBGPG keys\fP as well, which can be done by entering trusted GPG keys download URLs in the \fB/opt/my\-resources/setup/apt/keys.list\fP file
.IP \(bu 2
To install \fBAPT packages\fP automatically (after updating the repository including the custom ones), just enter a list of package names in the \fB/opt/my\-resources/setup/apt/packages.list\fP file
.UNINDENT
.SS \fBbloodhound\fP (customqueries, config)
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Available from version \fB3.1.0\fP of the \fBad\fP and \fBfull\fP images.
.UNINDENT
.UNINDENT
.sp
A system exists to easily add one or \fBseveral\fP bloodhound customqueries files, or change its configuration file in any new exegol container.
.sp
To automatically:
.INDENT 0.0
.IP \(bu 2
overwrite the \fB~/.config/bloodhound/config.json\fP configuration file, simply create the file \fB/opt/my\-resources/setup/bloodhound/config.json\fP
.IP \(bu 2
replace the default exegol customqueries, place one or several valid customqueries files into the folder \fB/opt/my\-resources/setup/bloodhound/customqueries_replacement/\fP\&.
.IP \(bu 2
merge with the default exegol customqueries by placing one or several valid customqueries files into the folder \fB/opt/my\-resources/setup/bloodhound/customqueries_merge/\fP
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
To be considered for replacing or merging, the customqueries files must be \fBvalid\fP and bear the \fB\&.json\fP extension. The file names do not matter.
The output will be saved into the single file \fB~/.config/bloodhound/customqueries.json\fP\&.
.UNINDENT
.UNINDENT
.SS \fBfirefox\fP (addons, CA)
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Available from version \fB3.0.2\fP of any exegol image.
.UNINDENT
.UNINDENT
.sp
A system exists to easily install arbitrary firefox addons in any new exegol container.
.sp
The \fB/opt/my\-resources/setup/firefox/addons.txt\fP file allows the user to list addons to install from online sources. It must be filled with their links in Mozilla’s shop (for example \fI\%https://addons.mozilla.org/fr/firefox/addon/foxyproxy\-standard/\fP ).
.sp
The \fB\&.xpi\fP files in \fB/opt/my\-resources/setup/firefox/addons/\fP folder will be installed as well.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Below, available from version \fB3.2.0\fP of any exegol image.
.UNINDENT
.UNINDENT
.sp
The \fB\&.der\fP files in \fB/opt/my\-resources/setup/firefox/CA/\fP folder will be trusted .
.SS \fBpython3\fP (pip3)
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Available from version \fB3.0.0\fP of any exegol image.
.UNINDENT
.UNINDENT
.sp
A system exists to easily install arbitrary PIP3 packages in any new exegol container.
.sp
The \fB/opt/my\-resources/setup/python3/requirements.txt\fP file allows the user to list a set of packages to install with constraints just like a classic \fBrequirements.txt\fP file.
.SS \fBtmux\fP (conf)
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Available from version \fB3.0.0\fP of any exegol image.
.UNINDENT
.UNINDENT
.sp
Exegol supports overloading its \fBtmux\fP configuration to allow all users to use their personal configuration.
.INDENT 0.0
.IP \(bu 2
To automatically overwrite the \fB~/.tmux.conf\fP configuration file, simply create the file \fB/opt/my\-resources/setup/tmux/tmux.conf\fP
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
It is possible to install \fBplugins\fP with the APT customization system, details \fI\%here\fP\&.
.UNINDENT
.UNINDENT
.SS \fBvim\fP (vimrc, configs)
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Available from version \fB3.0.0\fP of any exegol image.
.UNINDENT
.UNINDENT
.sp
Exegol supports overwriting its \fBvim\fP configuration to allow all users to use their personal configuration.
.INDENT 0.0
.IP \(bu 2
To automatically overwrite the \fB~/.vimrc\fP configuration file, simply create the file \fB/opt/my\-resources/setup/vim/vimrc\fP
.IP \(bu 2
.INDENT 2.0
.TP
.B vim configuration folders are also automatically synchronized:
.INDENT 7.0
.IP \(bu 2
\fB/opt/my\-resources/setup/vim/autoload/*\fP –> \fB~/.vim/autoload/\fP
.IP \(bu 2
\fB/opt/my\-resources/setup/vim/backup/*\fP –> \fB~/.vim/backup/\fP
.IP \(bu 2
\fB/opt/my\-resources/setup/vim/colors/*\fP –> \fB~/.vim/colors/\fP
.IP \(bu 2
\fB/opt/my\-resources/setup/vim/plugged/*\fP –> \fB~/.vim/plugged/\fP
.IP \(bu 2
\fB/opt/my\-resources/setup/vim/bundle/*\fP –> \fB~/.vim/bundle/\fP
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
It is possible to install \fBplugins\fP with \fI\%the APT customization system\fP\&.
.UNINDENT
.UNINDENT
.SS \fBneovim\fP (.config/nvim)
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Will be available from version \fB3.1.2\fP of any exegol image.
.UNINDENT
.UNINDENT
.sp
Exegol supports overwriting its \fBneovim\fP configuration to allow all users to use their personal configuration.
.INDENT 0.0
.IP \(bu 2
To automatically overwrite the \fB~/.config/nvim/\fP configuration, copy your config in  \fB/opt/my\-resources/setup/nvim/\fP
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
It is possible to install \fBplugins dependencies\fP with \fI\%the APT customization system\fP\&.
.UNINDENT
.UNINDENT
.SS \fBzsh\fP (aliases, zshrc, history)
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Available from version \fB3.0.0\fP of any exegol image.
.UNINDENT
.UNINDENT
.sp
To not change the configuration for the proper functioning of exegol but allow the user to add aliases and custom commands to zshrc,
additional configuration files will be automatically loaded by zsh to take into account the customization of the user .
.INDENT 0.0
.IP \(bu 2
\fBaliases\fP: any custom alias can be defined in the \fB/opt/my\-resources/setup/zsh/aliases\fP file. This file is automatically loaded by zsh.
.IP \(bu 2
\fBzshrc\fP: it is possible to add commands at the end of the zshrc routine in \fB/opt/my\-resources/setup/zsh/zshrc\fP file.
.IP \(bu 2
\fBhistory\fP: it is possible to automatically add history commands at the end of \fB~/.zsh_history\fP from the file \fB/opt/my\-resources/setup/zsh/history\fP\&.
.UNINDENT
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
It is possible to install \fBplugins\fP with the APT customization system, details \fI\%here\fP\&.
.UNINDENT
.UNINDENT
.SS User setup
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Available from version \fB3.0.0\fP of any exegol image.
.UNINDENT
.UNINDENT
.sp
The \fB/opt/my\-resources/setup/load_user_setup.sh\fP script is executed on the first startup of each new container that has the “my\-resources” feature enabled. Arbitrary code can be added in this file, in order to customize Exegol (dependency installation, configuration file copy, etc).
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
It is strongly advised \fBnot\fP to overwrite the configuration files provided by exegol (e.g. \fB/root/.zshrc\fP, \fB/opt/.exegol_aliases\fP, …), official updates will not be applied otherwise.
.UNINDENT
.UNINDENT
.SS Troubleshooting
.sp
In case of problem, the customization system logs all actions in the \fB/var/log/exegol/load_setups.log\fP file.
.sp
If the whole installation went smoothly the log file will be compressed by gunzip and will have the name \fB/var/log/exegol/load_setups.log.gz\fP
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
Logs in \fB\&.gz\fP format can be viewed directly \fBwithout unpacking\fP them with the \fBzcat\fP, \fBzgrep\fP, \fBzdiff\fP or \fBzmore\fP command!
.UNINDENT
.UNINDENT
.SS Credentials
.sp
Some tools are pre\-configured with the following credentials
.TS
center;
|l|l|l|.
_
T{
Element
T}	T{
User
T}	T{
Password
T}
_
T{
neo4j database
T}	T{
neo4j
T}	T{
exegol4thewin
T}
_
T{
bettercap ui
T}	T{
bettercap
T}	T{
exegol4thewin
T}
_
T{
trilium
T}	T{
trilium
T}	T{
exegol4thewin
T}
_
T{
empire
T}	T{
empireadmin
T}	T{
exegol4thewin
T}
_
T{
wso\-webshell (PHP)
T}	T{
T}	T{
exegol4thewin
T}
_
.TE
.SS Services list
.sp
This section lists the services that can be used in Exegol containers and their associated default ports.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Note that, as of 25/10/2023, a utility is being developped in order to randomize those ports so that multiple containers being used concurrently don’t have their services step on one another if they share a network interface. This utility will be mostly transparent, and will modify the services configuration files dynamically.
.UNINDENT
.UNINDENT
.TS
center;
|l|l|l|l|.
_
T{
Service
T}	T{
Port
T}	T{
Commands
T}	T{
Comments
T}
_
T{
neo4j
.INDENT 0.0
.IP \(bu 2
bolt
.IP \(bu 2
http
.IP \(bu 2
https
.UNINDENT
T}	T{
7687
.sp
7474
.sp
7373
T}	T{
\fBneo4j start\fP,
\fBneo4j stop\fP,
\fBneo4j restart\fP
T}	T{
Used by BloodHound, and BloodHound\-related projects.
T}
_
T{
BloodHound\-CE
T}	T{
1030
T}	T{
\fBbloodhound\-ce\fP
\fBbloodhound\-ce\-reset\fP
\fBbloodhound\-ce\-stop\fP
T}	T{
BloodHound Community Edition Web Interface
T}
_
T{
postgresql
T}	T{
5432
T}	T{
\fBservice postgresql [...]\fP
T}	T{
Used by BloodHound CE
T}
_
T{
Trilium
T}	T{
1991
T}	T{
\fBtrilium\-start\fP,
\fBtrilium\-stop\fP
T}	T{
Collaborative note taking app. \fI\%https://github.com/zadam/trilium\fP
T}
_
T{
Burp Suite
T}	T{
8080
T}	T{
\fBburpsuite\fP
T}	T{
HTTP(S) Proxy
T}
_
T{
Starkiller (Empire)
T}	T{
TBD
T}	T{
\fBps\-empire server\fP
T}	T{
GUI for the Empire post\-exploit framework (\fI\%https://github.com/BC\-SECURITY/Empire\fP)
T}
_
T{
Havoc
T}	T{
40056
T}	T{
\fBhavoc client/server\fP
T}	T{
C2 Framework in GO (\fI\%https://github.com/HavocFramework/Havoc\fP)
T}
_
T{
Desktop
.INDENT 0.0
.IP \(bu 2
vnc
.IP \(bu 2
websockify
.UNINDENT
T}	T{
6336
.sp
random
T}	T{
\fBdesktop\-start\fP,
\fBdesktop\-stop\fP,
\fBdesktop\-restart\fP
T}	T{
Remote graphical desktop feature (beta). Used with the \fB\-\-desktop\fP from up\-to\-date wrapper.
T}
_
.TE
.SS Resources
.sp
Exegol’s “offline resources” are a neat choice of standalone tools and scripts that are often used during penetration tests,
CTFs and red\-teams.
While many penetration testers download those resources again every time they need them, Exegol users don’t have to.
Everything is managed by the wrapper and they are shared with every container by default (at \fB/opt/resources\fP).
.SS Resources list
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
The list featured here is automatically generated. Exegol features CI/CD pipelines that build the images, update the resources, etc.
When a change is made on the Exegol\-resources repository, it’s reflected here, in the list.
.UNINDENT
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Resource
T}	T{
Link
T}	T{
Description
T}
_
T{
SysInternals
T}	T{
\fI\%https://learn.microsoft.com/en\-us/sysinternals\fP
T}	T{
Windows utilities signed by Microsoft
T}
_
T{
pspy
T}	T{
\fI\%https://github.com/DominicBreuker/pspy\fP
T}	T{
Monitor linux processes without root permissions
T}
_
T{
PEASS\-ng
T}	T{
\fI\%https://github.com/carlospolop/PEASS\-ng\fP
T}	T{
Privilege Escalation Awesome Scripts SUITE
T}
_
T{
linux\-smart\-enumeration (lse.sh)
T}	T{
\fI\%https://github.com/diego\-treitos/linux\-smart\-enumeration\fP
T}	T{
Linux enumeration tool for pentesting and CTFs with verbosity levels
T}
_
T{
LinEnum
T}	T{
\fI\%https://github.com/rebootuser/LinEnum\fP
T}	T{
Scripted Local Linux Enumeration & Privilege Escalation Checks
T}
_
T{
Linux Exploit Suggester
T}	T{
\fI\%https://github.com/The\-Z\-Labs/linux\-exploit\-suggester\fP
T}	T{
Linux privilege escalation auditing tool
T}
_
T{
Mimikatz
T}	T{
\fI\%https://github.com/gentilkiwi/mimikatz\fP
T}	T{
A little tool to play with Windows security
T}
_
T{
SharpHound.exe
T}	T{
\fI\%https://github.com/BloodHoundAD/BloodHound\fP
T}	T{
C# ingestor for BloodHound
T}
_
T{
JuicyPotato.exe
T}	T{
\fI\%https://github.com/ohpe/juicy\-potato\fP
T}	T{
\fI\%https://github.com/ohpe/juicy\-potato\fP
T}
_
T{
static netcat (linux)
T}	T{
\fI\%https://github.com/andrew\-d/static\-binaries\fP
T}	T{
Utility to establish TCP or UDP connections
T}
_
T{
static netcat (windows)
T}	T{
\fI\%https://gitlab.com/onemask/pentest\-tools\fP
T}	T{
Utility to establish TCP or UDP connections
T}
_
T{
SpoolSample.exe
T}	T{
\fI\%https://gitlab.com/onemask/pentest\-tools\fP
T}	T{
PoC tool to coerce Windows hosts authenticate to other machines
T}
_
T{
DiagHub.exe
T}	T{
\fI\%https://gitlab.com/onemask/pentest\-tools\fP
T}	T{
Diagnostics Hub Standard Collector Service
T}
_
T{
LaZagne
T}	T{
\fI\%https://github.com/AlessandroZ/LaZagne\fP
T}	T{
Credentials recovery project
T}
_
T{
Sublinacl.exe
T}	T{
\fI\%https://gitlab.com/onemask/pentest\-tools\fP
T}	T{
Modify Access Control Entries
T}
_
T{
plink.exe
T}	T{
\fI\%https://www.cog\-genomics.org/plink/\fP
T}	T{
Network connection tool
T}
_
T{
deepce
T}	T{
\fI\%https://github.com/stealthcopter/deepce\fP
T}	T{
Docker Enumeration Escalation of Privileges and Container Escapes
T}
_
T{
Some webshells
T}	T{
T}	T{
PHP and ASPX webshells
T}
_
T{
ysoserial
T}	T{
\fI\%https://github.com/pwntester/ysoserial\fP
T}	T{
A proof\-of\-concept tool for generating payloads that exploit unsafe Java object deserialization
T}
_
T{
http\-put\-server
T}	T{
\fI\%https://gist.githubusercontent.com/mildred/67d22d7289ae8f16cae7/raw/214c213c9415da18a471d1ed04660022cce059ef/server.py\fP
T}	T{
HTTP PUT Server
T}
_
T{
Chisel
T}	T{
\fI\%https://github.com/jpillora/chisel\fP
T}	T{
A fast TCP/UDP tunnel over HTTP
T}
_
T{
ligolo\-ng
T}	T{
\fI\%https://github.com/nicocha30/ligolo\-ng\fP
T}	T{
Advanced yet simple tunneling/pivoting tool that uses a TUN interface
T}
_
T{
bitleaker
T}	T{
\fI\%https://github.com/kkamagui/bitleaker\fP
T}	T{
This tool can decrypt a BitLocker\-locked partition with the TPM vulnerability
T}
_
T{
napper
T}	T{
\fI\%https://github.com/kkamagui/napper\-for\-tpm\fP
T}	T{
TPM vulnerability checking tool for CVE\-2018\-6622
T}
_
T{
mimipenguin
T}	T{
\fI\%https://github.com/huntergregal/mimipenguin\fP
T}	T{
A tool to dump the login password from the current linux user
T}
_
T{
p0wny\-shell
T}	T{
\fI\%https://github.com/flozz/p0wny\-shell\fP
T}	T{
Single\-file PHP shell
T}
_
T{
Inveigh
T}	T{
\fI\%https://github.com/Kevin\-Robertson/Inveigh\fP
T}	T{
\&.NET IPv4/IPv6 machine\-in\-the\-middle tool for penetration testers
T}
_
T{
MailSniper
T}	T{
\fI\%https://github.com/dafthack/MailSniper\fP
T}	T{
Penetration testing tool for searching through email in a Microsoft Exchange
T}
_
T{
PowerSploit
T}	T{
\fI\%https://github.com/PowerShellMafia/PowerSploit\fP
T}	T{
A PowerShell Post\-Exploitation Framework
T}
_
T{
PrivescCheck
T}	T{
\fI\%https://github.com/itm4n/PrivescCheck\fP
T}	T{
Privilege Escalation Enumeration Script for Windows
T}
_
T{
SharpCollection
T}	T{
\fI\%https://github.com/Flangvik/SharpCollection\fP
T}	T{
Nightly builds of common C# offensive tools
T}
_
T{
WinEnum
T}	T{
\fI\%https://github.com/neox41/WinEnum\fP
T}	T{
Script for Local Windows Enumeration
T}
_
T{
impacket\-examples\-windows
T}	T{
\fI\%https://github.com/maaaaz/impacket\-examples\-windows\fP
T}	T{
The great impacket example scripts compiled for Windows
T}
_
T{
nishang
T}	T{
\fI\%https://github.com/samratashok/nishang\fP
T}	T{
Offensive PowerShell for red team
T}
_
.TE
.SS Users
.sp
This part of the documentation is meant for Exegol users, those who want to understand the project a bit more, open issues, get in touch with the community, etc..
.INDENT 0.0
.IP \(bu 2
\fI\%Opening issues\fP
.IP \(bu 2
\fI\%Roadmap\fP
.IP \(bu 2
\fI\%Discord\fP
.UNINDENT
.SS Opening issues
.sp
Create an issue in the correct repository:
.INDENT 0.0
.IP \(bu 2
For any problem concerning \fI\%Exegol WRAPPER\fP (the exegol command).
.IP \(bu 2
For any problem concerning \fI\%Exegol IMAGE\fP (the exegol environment).
.IP \(bu 2
For any problem concerning \fI\%Exegol RESOURCE\fP (the exegol offline resources).
.UNINDENT
.SS Roadmap
.sp
The roadmap is available on GitHub: \fI\%https://github.com/orgs/ThePorgs/projects/1/views/1\fP
[image: Roadmap (GitHub)]
[image]
.SS Discord
.sp
An Exegol discord has been created to facilitate exchanges between the community, open tickets, share ideas, vote on future features to prioritize etc..
.SS Contributors
.sp
This part of the documentation is meant for Exegol contributors, those who write code and open pull requests. If adds up to the \fI\%users\fP documentation.
.sp
First things first, once you know on what module you want to contribute (\fI\%wrapper\fP, \fI\%images\fP, \fI\%documentation\fP, \fI\%resources\fP, etc.) \fI\%fork it\fP, \fI\%checkout\fP to the \fBdev\fP branch, then come back to this page to start coding.
.INDENT 0.0
.IP \(bu 2
\fI\%Documentation\fP
.IP \(bu 2
\fI\%Images\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Adding a new tool\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Function structure\fP
.IP \(bu 2
\fI\%Install standards\fP
.IP \(bu 2
\fI\%Other standards\fP
.IP \(bu 2
\fI\%Multi\-architecture builds\fP
.IP \(bu 2
\fI\%Calling the install function\fP
.IP \(bu 2
\fI\%Submitting the pull request\fP
.UNINDENT
.IP \(bu 2
\fI\%Temporary fixing a tool\fP
.IP \(bu 2
\fI\%Adding to my\-resources\fP
.UNINDENT
.IP \(bu 2
\fI\%Wrapper\fP
.IP \(bu 2
\fI\%Signing commits\fP
.UNINDENT
.SS Documentation
.sp
A new feature, whether it’s on the wrapper, images, or any other module, must be documented accordingly. Make sure to open a pull request to the appropriate \fI\%Exegol docs\fP branch on top of your wrapper/images/whatever pull request.
.SS Exegol\-docs branches
.TS
center;
|l|l|.
_
T{
Branch
T}	T{
Purpose
T}
_
T{
main
T}	T{
nothing gets pushed there. This branch is made to merge with the other branches.
T}
_
T{
dev\-wrapper
T}	T{
Related to the wrapper (\fI\%Exegol\fP )
T}
_
T{
dev\-images
T}	T{
Related to the images (\fI\%Exegol\-images\fP )
T}
_
T{
dev
T}	T{
General purpose
T}
_
.TE
.sp
Before pushing a pull request on the documentation repository, it is advised to try and compile locally to make sure there are no errors and everything renders as expected. First, the requirements listed in \fBrequirements.txt\fP must be installed (e.g. \fBpip install \-\-user \-r ./requirements.txt\fP). Then, the one\-liner below can be used to remove any previous build, compile again and open the build in a browser.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
rm \-r build; make html; open \(dqbuild/html/community/contributors.html\(dq
.EE
.UNINDENT
.UNINDENT
.sp
\fBNota bene\fP: in the example above, the \fBopen\fP command opens an Internet browser (it’s a macOS command), but it can be replaced by anything else that fits the contributor’s environement (e.g. \fBfirefox\fP).
.SS Images
.sp
The Docker images are the heart of the Exegol project. A neat choice of tools, configurations, aliases, history commands, and various customizations are prepared in multiple images adapted for multiple uses: web hacking, Active Directory, OSINT (Open Source INTelligence), etc.
.sp
If you want to contribute to this part of the project, there are some things you need to know and some rules you need to follow.
.SS Adding a new tool
.sp
In order to add a new tool to an image, here is how it goes. First, you need to figure out in what package your tool installation function must go to: \fI\%packages\fP\&.
.SS Function structure
.sp
When preparing the install function to the package, don’t forget to include the following functions:
.INDENT 0.0
.IP \(bu 2
\fBcolorecho \(dqInstalling yourtool\(dq\fP: this is needed to raise logs inside the CI/CD pipeline
.IP \(bu 2
\fBcatch_and_retry <some command>\fP: this one is optional. When a command uses the Internet and could potentially fail randomly, the \fBcatch_and_retry\fP wrapper is here to retry that commands multiple times with increasing time intervals in order to avoid having a whole build fail because of one temporary network error. Nota bene: most standard Internet\-involved commands are transparently put behind a \fBcatch_and_retry\fP (e.g. \fBgit\fP, \fBwget\fP, \fBcurl\fP, \fBgo\fP, etc.).
.IP \(bu 2
\fBadd\-aliases yourtool\fP: if your tool needs to have one or multiple aliases to work properly. You will need to create the aliases file in \fB/sources/assets/shells/aliases.d/\fP named after your tool. This file must contain the alias(es) to set as follows.
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.EX
alias tool.py=\(aqpython3 /opt/tools/yourtool/tool.py\(aq
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBadd\-history yourtool\fP: if it’s relevant to give some command example of your tool. No need to populate the history with a command that’s very short or never used. Using long arguments is preferred. Using environment variables is preferred (e.g. \fB$USER\fP, \fB$PASSWORD\fP, \fB$TARGET\fP, etc.). You will need to create the history file in \fB/sources/assets/shells/history.d/\fP named after your tool. This file must contain the history command(s) like the example below.
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.EX
yourtool.py \-\-user \(dq$USER\(dq \-\-password \(dq$PASSWORD\(dq \-\-target \(dq$TARGET\(dq
yourtool.py \-\-mode enum \-\-user \(dq$USER\(dq \-\-target \(dq$TARGET\(dq
yourtool.py \-\-mode unauthenticated
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBadd\-test\-command \(dqtestcommand\(dq\fP: this is needed by the CI/CD pipeline to conduct unit tests for all tools to make sure they are installed properly before publishing new images. The test command needs to return \fB0\fP if the tool works properly, anything else if it doesn’t. For instance, something like \fByourtool.py \-\-help\fP usually works, but not always! In order to find what command can be used for unit tests, you can do something like \fByourtool.py \-\-help; echo $?\fP to see what code is returned after the command is executed. Once trick that can be used when the \fB\-\-help\fP command returns something \fB!=0\fP is to do some grep like \fByourtool.py \-\-help|& grep \(aqUsage:\(aq\fP\&.
.IP \(bu 2
\fBadd\-to\-list \(dqyourtool,https://link.to/the/tool,description\(dq\fP: this is used by the CI/CD pipeline to automatically export tools in the \fI\%Tools list\fP\&. The format of the entry is standard 3\-columns CSV (comma separated values). The first column is the tool name, then the link to the tool, then the description. Be careful to not have more than 2 commas and replace any comma in the description by something else.
.UNINDENT
.sp
In case your tool doesn’t need aliases or history commands, add the following comment at the beggining of the tool install function: \fB# CODE\-CHECK\-WHITELIST=\fP\&. Then add a comma\-separated list of the exclusions. Below are some examples.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# CODE\-CHECK\-WHITELIST=add\-aliases
# CODE\-CHECK\-WHITELIST=add\-aliases,add\-history
.EE
.UNINDENT
.UNINDENT
.sp
\fBTL;DR\fP, your tool installation function should look something like this:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
function install_yourtool() {
    colorecho \(dqInstalling yourtool\(dq
    # tool install commands [...]
    add\-aliases yourtool
    add\-history yourtool
    add\-test\-command \(dqyourtool.py \-\-help\(dq
    add\-to\-list \(dqyourtool,https://link.to/the/tool,description\(dq
}
.EE
.UNINDENT
.UNINDENT
.SS Install standards
.sp
When installing a tool, depending on how it gets installed, here are the rules.
.INDENT 0.0
.IP \(bu 2
Most tools have their virtual environment, in order to avoid dependencies conflicts.
.IP \(bu 2
Most tools are installed either in their own directory in \fB/opt/tools/\fP or have the binary (or a symlink) in \fB/opt/tools/bin/\fP\&.
.IP \(bu 2
Disk space being limited, we’re not pull every code source around. When possible, add the \fB\-\-depth 1\fP option to your usual \fBgit clone\fP command.
.UNINDENT
Python sources (pipx)
.sp
Python sources (venv)
.sp
APT install
.sp
Go
.sp
Ruby
.sp
Compile sources
.sp
Download compiled binary
The easiest way to install a Python tool is to use pipx.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# from github.com example
python3 \-m pipx install git+https://github.com/AUTHOR/REPO

# from local sources
git \-C /opt/tools/ clone \-\-depth 1 https://github.com/AUTHOR/REPO
python3 \-m pipx install /opt/tools/yourtool/
.EE
.UNINDENT
.UNINDENT
.sp
But some tools cannot be installed this way, either because they’re missing the \fBsetup.py\fP or for any other obscure reason. In that case, opt for the “Python (venv)” solution.
In this example, the tool sources are downloaded, a virtual python environment is set up, requirements are installed, and an alias is created.
.sp
\fBNota bene 1\fP: when the requirements are installed, it’s better to have the command put behind a \fBcatch_and_retry\fP so that if their is a temporary network outage during the build, the command will be tried multiple times with increased delays to avoid having the whole build fail.
.sp
\fBNota bene 2\fP: there is no need to put standard \fBgit\fP, \fBwget\fP, \fBcurl\fP, \fBgo\fP, and similar commands behind a \fBcatch_and_retry\fP as its already handled transparently.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
git \-C /opt/tools/ clone \-\-depth 1 https://github.com/AUTHOR/REPO
cd /opt/tools/yourtool || exit
python3 \-m venv ./venv/
source ./venv/bin/activate
pip3 install \-r requirements.txt
deactivate
add\-aliases yourtool
.EE
.UNINDENT
.UNINDENT
.sp
And add the following alias to your new alias file in \fB/sources/assets/shells/aliases.d/\fP
.INDENT 0.0
.INDENT 3.5
.sp
.EX
alias yourtool=\(aq/opt/tools/yourtool/venv/bin/python3 /opt/tools/yourtool/yourtool.py\(aq
.EE
.UNINDENT
.UNINDENT
APT installations are regrouped to go faster and save some bandwith. In the \fBpackage_whatever.sh\fP file you’re editing, look for a function called \fBinstall_*_apt_tools()\fP\&.
The package you want to install needs to be added there, along with the \fBadd\-history\fP, \fBadd\-test\-command\fP and \fBadd\-to\-list\fP instructions.
Go tools can be installed with a standard \fBgo install \-v github.com/AUTHOR/REPO@latest\fP command.
A typical Ruby tool install will look like this:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
function install_yourtool() {
    colorecho \(dqInstalling yourtool\(dq
    rvm use 3.0.0@yourtool \-\-create
    gem install yourtool
    rvm use 3.0.0@default
    add\-aliases yourtool
    add\-history yourtool
    add\-test\-command \(dqyourtool \-\-help\(dq
    add\-to\-list \(dqyourtool,https://github.com/AUTHOR/REPO,description\(dq
}
.EE
.UNINDENT
.UNINDENT
.sp
And the alias file will look something like this.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
alias yourtool=\(aq/usr/local/rvm/gems/ruby\-3.0.0@yourtool/wrappers/ruby /usr/local/rvm/gems/ruby\-3.0.0@yourtool/bin/yourtool\(aq
.EE
.UNINDENT
.UNINDENT
When installing a binary tool (pre\-compiled or compiled live), it needs to be moved or linked in \fB/opt/tools/bin\fP\&.
Below is an example of tool compilation and installation.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
function install_yourtool() {
    colorecho \(dqInstalling yourtool\(dq
    git \-C /opt/tools/ clone \-\-depth 1 https://github.com/AUTHOR/REPO
    cd /opt/tools/yourtool
    ./configure
    make
    ln \-s \(dq/opt/tools/yourtool/bin/yourtool\(dq \(dq/opt/tools/bin/yourtool\(dq
    add\-history yourtool
    add\-test\-command \(dqyourtool \-\-help\(dq
    add\-to\-list \(dqyourtool,https://github.com/AUTHOR/REPO,description\(dq
}
.EE
.UNINDENT
.UNINDENT
It’s not uncommon to have tools already compiled, sometimes available in the “releases” section of a GitHub repository.
In the following example, the latest .tar.xz release archive is dynamically fecthed from the repo, by grepping the right strings to match the name of the file and extracted. And then a symbolic link is created.
The extact context can differ for each and every tool, but the example function below can serve as codebase. Trying to find similar examples in the code could also help a contributor find similar contexts and how they got implemented.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
function install_yourtool() {
    colorecho \(dqInstalling yourtool\(dq
    local URL
    URL=$(curl \-\-location \-\-silent \(dqhttps://api.github.com/repos/AUTHOR/REPO/releases/latest\(dq | grep \(aqbrowser_download_url.*somestring.*tar.xz\(dq\(aq | grep \-o \(aqhttps://[^\(dq]*\(aq)
    curl \-\-location \-o /tmp/tool.tar.xz \(dq$URL\(dq
    tar \-xf /tmp/yourtool.tar.xz \-\-directory /tmp
    rm /tmp/yourtool.tar.xz
    mv /tmp/yourtool* /opt/tools/yourtool
    ln \-s \(dq/opt/tools/yourtool/bin/yourtool\(dq \(dq/opt/tools/bin/yourtool\(dq
    add\-history yourtool
    add\-test\-command \(dqyourtool \-\-help\(dq
    add\-to\-list \(dqyourtool,https://github.com/AUTHOR/REPO,description\(dq
}
.EE
.UNINDENT
.UNINDENT
.SS Other standards
.sp
If your tool opens ports, or if there are credentials at play, please take a look at the corresponding documentations
.INDENT 0.0
.IP \(bu 2
\fI\%Credentials\fP
.IP \(bu 2
\fI\%Ports & services\fP
.UNINDENT
.SS Multi\-architecture builds
.sp
Know that Exegol images are built by, and for, AMD64 and ARM64 systems. Most systems are AMD64 (x86_64), but some other people use ARM64 (M1/M2 Apple Sillicon chips, 64bits Raspberry\-Pies, …).
Whenever possible, try to make sure your tool install function works for both architectures.
Rest assured, if you don’t have both architectures at your disposal it’s perfectly fine, we’ll take care of this part for you.
If you do, and if your tool installation function includes some commands that differ wether they run on an ARM64 or AMD64 host, you can use the following structure.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
if [[ $(uname \-m) = \(aqx86_64\(aq ]]
then
    # command for AMD64
elif [[ $(uname \-m) = \(aqaarch64\(aq ]]
then
    # command for ARM64
else
    criticalecho\-noexit \(dqThis installation function doesn\(aqt support architecture $(uname \-m)\(dq && return
fi
.EE
.UNINDENT
.UNINDENT
.SS Calling the install function
.sp
Once the install function is over with, it needs to be called in the function that holds the same name as the package.
For instance, if you’re adding your tool install function in the \fBpackage_web.sh\fP package, you’ll need to call that function in the \fBpackage_ad()\fP function (usually at the bottom of that file).
.sp
It will look something like this.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
function package_web() {
    [...]
    install_yourtool
    [...]
}
.EE
.UNINDENT
.UNINDENT
.SS Submitting the pull request
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
Once all your changes are over, and before submitting a pull request, it is advised to test your installation process locally.
The Exegol wrapper can be used to build local images. Run \fBexegol install \-\-help\fP to see some examples.
You can also run the unit tests yourself by creating
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# build the local image
exegol install \(dqtestimage\(dq \(dqfull\(dq \-\-build\-log \(dq/tmp/testimage.log\(dq

# create and start a container for the tests
exegol start \(dqtestcontainer\(dq \(dqtestimage\(dq

# run the tests (from the container)
cat /.exegol/build_pipeline_tests/all_commands.txt | grep \-vE \(dq^\es*$\(dq | sort \-u > /.exegol/build_pipeline_tests/all_commands.sorted.txt
python3 /.exegol/build_pipeline_tests/run_tests.py
cat /.exegol/build_pipeline_tests/failed_commands.log
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Your pull request needs to be made against the \fBdev\fP branch.
.UNINDENT
.UNINDENT
.sp
Once you submit your pull request, and once the various changes that may be requested are made, a CI/CD pipeline will run to make sure your code is compliant and that the tool is installed and works as intended.
The pipeline may raise some issues, but if they’re not related to your tool (e.g. network issues are common) don’t worry about it. If the errors are due to your tool install, then you’ll need to make the necessary changes to make your install work.
.sp
Once everything works, the pull request will be merged, the pipeline will run again in order to test, build and publish a new \fBnightly\fP image. Congrats, you’re now an Exegol contributor!
.SS Temporary fixing a tool
.sp
Tools sometimes have their own issues along their development. A temporary fix can be added as follows, in order to let builds pass successfully, while the respective tool is not fixed. The fix depends on the way the tool is supposed to be installed.
Git (checkout)
.sp
Git (merge PRs)
Applying the temporary fix for a tool installed through git goes as follows when checking out a previous commit
.INDENT 0.0
.IP 1. 3
Find the commit id that made the tool install fail. This can be found in a try & repeat manner by installing the tool in an exegol container, checking out on a commit ID, try installing again, and repeat until it works.
.IP 2. 3
Comment out the inital \fBgit clone\fP command.
.IP 3. 3
Add the temporary fix (\fBgit clone\fP and \fBgit checkout\fP) in a if statement that makes sure the fix won’t stay there forever. The error message will be raised and noticed in the pipeline.
.IP 4. 3
(bonus) create an issue on the repo (if it doesn’t exist already) with the appropriate logs to help the tool’s maintainers notice the installation error and fix it.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
function install_TOOL() {
    [...]
    # git \-C /opt/tools/ clone \-\-depth 1 https://github.com/REPO/TOOL.git
    local temp_fix_limit=\(dqYYYY\-MM\-DD\(dq
    if [ \(dq$(date +%Y%m%d)\(dq \-gt \(dq$(date \-d $temp_fix_limit +%Y%m%d)\(dq ]; then
      criticalecho \(dqTemp fix expired. Exiting.\(dq
    else
      git \-C /opt/tools/ clone https://github.com/REPO/TOOL.git
      git \-C /opt/tools/TOOL checkout 774f1c33efaaccf633ede6e704800345eb313878
    fi
    [...]
}
.EE
.UNINDENT
.UNINDENT
When merging PRs on the fly, the temp fix goes like this
.INDENT 0.0
.IP 1. 3
Find the PRs the need to be merged. \fBWarning: only PRs from trusted authors must be hot\-merged in this manner\fP\&.
.IP 2. 3
List the PR numbers in the \fBPRS\fP array
.IP 3. 3
Merge. In the example below the \fB\-\-strategy\-option theirs\fP strategy is chosen, but it can be changed if needed.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
function install_TOOL() {
    [...]
    git \-C /opt/tools/ clone \-\-depth 1 https://github.com/REPO/TOOL.git
    local temp_fix_limit=\(dqYYYY\-MM\-DD\(dq
    if [ \(dq$(date +%Y%m%d)\(dq \-gt \(dq$(date \-d $temp_fix_limit +%Y%m%d)\(dq ]; then
        criticalecho \(dqTemp fix expired. Exiting.\(dq
    else
        git config \-\-local user.email \(dqlocal\(dq
        git config \-\-local user.name \(dqlocal\(dq
        local PRS=(\(dq111\(dq \(dq222\(dq \(dq333\(dq)
        for PR in \(dq${PRS[@]}\(dq; do git fetch origin \(dqpull/$PR/head:pull/$PR\(dq && git merge \-\-strategy\-option theirs \-\-no\-edit \(dqpull/$PR\(dq; done
    fi
    [...]
}
.EE
.UNINDENT
.UNINDENT
.SS Adding to my\-resources
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
This documentation is not written yet… Please contact us if you would like to contribute to this part and don’t know how.
.UNINDENT
.UNINDENT
.SS Wrapper
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
This documentation is not written yet… Please contact us if you would like to contribute to this part and don’t know how.
.UNINDENT
.UNINDENT
.SS Signing commits
.sp
To make the project as secure as possible, signed commits are now required to contribute to the project.
Using signatures for commits on GitHub serves several important purposes :
.INDENT 0.0
.IP \(bu 2
\fBAuthentication\fP: it verifies the authenticity of the commit, ensuring that it was indeed made by the person claiming to have made it.
.IP \(bu 2
\fBIntegrity\fP: it ensures that the commit hasn’t been tampered with since it was signed. Any changes to the commit after it has been signed will invalidate the signature.
.IP \(bu 2
\fBTrust\fP: this ensures that all contributions come from trusted sources.
.IP \(bu 2
\fBVisibility\fP: on GitHub, signed commits are marked with a “verified” label, giving users and collaborators confidence in the commit’s origin and integrity.
.UNINDENT
.sp
GitHub offers \fI\%an official documentation\fP on the matter that can be followed to setup and sign commits properly. Exegol’s documentation will sum it up briefly and link to it whenever it’s needed.
.sp
While \fBSSH (+ FIDO2)\fP is preferred since it offers better multi\-factor signing capabilities (knowledge + hardware possession factors), people that don’t have the required hardware can proceed with GPG or SSH.
GPG
.sp
SSH
.sp
SSH (+ FIDO2)
Generating a GPG key can be done by following GitHub’s official documentation on the matter (\fI\%generating a new GPG key\fP).
TL;DR, the commands look something like this:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# for the email, indicate your public email (ID+Name@users.noreply.github.com) from https://github.com/settings/emails
gpg \-\-quick\-generate\-key \(dqYOUR_NAME <ID+Name@users.noreply.github.com>\(dq ed25519 sign 0
gpg \-\-list\-secret\-keys \-\-keyid\-format=long
gpg \-\-armor \-\-export $KEYID
.EE
.UNINDENT
.UNINDENT
.sp
Once the GPG key is generated, it can be added to the contributor’s GitHub profile. Again, GitHub’s documentation explains how to achieve that (\fI\%adding a GPG key to your GitHub account\fP).
.sp
Once the GPG key is generated and associated to the GitHub account, it can be used to sign commits. In order to achieve that, the contributor must configure \fBgit\fP properly on his machine (\fI\%telling git about your GPG key\fP).
.sp
TL;DR: the commands look something like this to set it up for \fBgit\fP CLI:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
gpg \-\-list\-secret\-keys \-\-keyid\-format=long
git config \-\-global user.signingkey $KEYID

# (option 1) configure locally on a specific repo
cd /path/to/repository && git config commit.gpgsign true

# (option 2) configure for all git operations
git config \-\-global commit.gpgsign true
.EE
.UNINDENT
.UNINDENT
.sp
To set it up on IDEs, proper official documentations can be followed (e.g. \fI\%GitKraken\fP, \fI\%PyCharm\fP).
Generating an SSH key can be done by following GitHub’s official documentation on the matter (\fI\%generating a new SSH key\fP).
TL;DR, the commands look something like this:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# for the email, indicate your public email (ID+Name@users.noreply.github.com) from https://github.com/settings/emails
ssh\-keygen \-t ed25519 \-C \(dqYOUR_NAME <ID+Name@users.noreply.github.com>\(dq
.EE
.UNINDENT
.UNINDENT
.sp
Once the SSH key is generated, the public part can be added to the contributor’s GitHub profile. Again, GitHub’s documentation explains how to achieve that (\fI\%adding a new SSH key to your GitHub account\fP).
.sp
Once the SSH key is generated and associated to the GitHub account, it can be used to authenticate and sign commits. In order to achieve that, the contributor must configure \fBssh\fP and \fBgit\fP properly on his machine (\fI\%telling git about your SSH key\fP).
.sp
TL;DR: the commands look something like this:
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
The \fBgit\fP client version must be 2.34 or later.
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# if setting up for the first time, configure git
git config \-\-global user.name \(dqYOUR_NAME\(dq
# for the email, indicate your public email (ID+Name@users.noreply.github.com) from https://github.com/settings/emails
git config \-\-global user.email \(dqID+Name@users.noreply.github.com\(dq

git config \-\-global gpg.format ssh
# replace the public key path if needed, below is an example
git config \-\-global user.signingkey \(dq$HOME/.ssh/id_ed25519.pub\(dq

# configure git to sign commits and tags by default
git config \-\-global commit.gpgsign true
git config \-\-global tag.gpgsign true

# verify commits locally, associate SSH public keys with users
mkdir \-p ~/.config/git
echo \(dq$(git config \-\-get user.email) $(cat ~/.ssh/id_ed25519.pub)\(dq | tee ~/.config/git/allowed_signers
git config \-\-global gpg.ssh.allowedSignersFile \(dq$HOME/.config/git/allowed_signers\(dq
.EE
.UNINDENT
.UNINDENT
.sp
The SSH connection can then be tested as follows (\fI\%testing your SSH connection\fP).
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# load the SSH agent into the current shell
eval \(dq$(ssh\-agent \-s)\(dq

# test the SSH authentication to GitHub servers
ssh \-T git@github.com
.EE
.UNINDENT
.UNINDENT
This part of the doc explains how to setup and use FIDO2 security keys, such as YubiKeys, Google’s Titan, etc.
.sp
First of all, a new FIDO2 key can be configured as follows to set up a PIN.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# list FIDO2 devices
fido2\-token \-L

# set a PIN for the device
fido2\-token \-S $device
.EE
.UNINDENT
.UNINDENT
.sp
Then, a \fI\%resident key\fP can be created and stored on the YubiKey as follows (see \fI\%Yubico’s documentation\fP).
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
Some FIDO2 keys (e.g. recent YubiKeys, and probably others) support \fBresident keys\fP\&. A resident key is stored on the hardware key itself and easier to import to a new computer because it can be loaded directly from the security key.
In order to use that feature, the \fB\-O resident\fP option can be added to the \fBssh\-keygen\fP command chosen below.
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# (default) touch only
ssh\-keygen \-t ed25519\-sk

# PIN + touch
ssh\-keygen \-t ed25519\-sk \-O verify\-required

# nothing (could be unsupported by some OpenSSH clients)
ssh\-keygen \-t ed25519\-sk \-O no\-touch\-required

# PIN (could be unsupported by some OpenSSH clients)
ssh\-keygen \-t ed25519\-sk \-O verify\-required \-O no\-touch\-required
.EE
.UNINDENT
.UNINDENT
.sp
Once the SSH key is generated, the public part can be added to the contributor’s GitHub profile. GitHub’s documentation explains how to achieve that (\fI\%adding a new SSH key to your GitHub account\fP).
.sp
Once a key is created and added on GitHub, it can be added to the contributor’s machine SSH environment as follows. This is as easy as copy\-pasting the public and private key parts to \fB~/.ssh\fP\&.
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
If you opted for a \fBresident key\fP setup, the SSH key can be loaded from the hardware key itself.
.sp
Note that those steps shouldn’t be needed when the key has just been created, as the keys should automatically be added to \fB~/.ssh\fP\&. The commands below are mostly relevant when using \fBexisting\fP resident keys on \fBa new system\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# temporary
# needs to be done again after a reboot
ssh\-add \-K

# permanent
# will download the private and public resident security keys in the current directory
# private key is to be moved in ~/.ssh (physical FIDO2 key will always be needed)
ssh\-keygen \-K
mv id_ed25519_sk_rk ~/.ssh/id_ed25519_sk
mv id_ed25519_sk_rk.pub ~/.ssh/id_ed25519_sk.pub
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Once the SSH environment is ready, \fBgit\fP CLI can be configured to rely on the security key for signing commits and authenticating (\fI\%telling git about your SSH key\fP).
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
The \fBgit\fP client version must be 2.34 or later.
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# if setting up for the first time, configure git
git config \-\-global user.name \(dqYOUR_NAME\(dq
# for the email, indicate your public email (ID+Name@users.noreply.github.com) from https://github.com/settings/emails
git config \-\-global user.email \(dqID+Name@users.noreply.github.com\(dq

git config \-\-global gpg.format ssh
# replace the public key path if needed, below is an example
git config \-\-global user.signingkey \(dq$HOME/.ssh/id_ed25519_sk.pub\(dq

# configure git to sign commits and tags by default
git config \-\-global commit.gpgsign true
git config \-\-global tag.gpgsign true

# verify commits locally, associate SSH public keys with users
mkdir \-p ~/.config/git
echo \(dq$(git config \-\-get user.email) $(cat ~/.ssh/id_ed25519_sk.pub)\(dq | tee ~/.config/git/allowed_signers
git config \-\-global gpg.ssh.allowedSignersFile \(dq$HOME/.config/git/allowed_signers\(dq
.EE
.UNINDENT
.UNINDENT
.sp
The SSH connection can then be tested as follows (\fI\%testing your SSH connection\fP).
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# load the SSH agent into the current shell
eval \(dq$(ssh\-agent \-s)\(dq

# test the SSH authentication to GitHub servers
ssh \-T git@github.com
.EE
.UNINDENT
.UNINDENT
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
The contributor’s GitHub account can be configured to mark unsigned commits as unverified or partially verified. While it’s not mandatory regarding contributions to Exegol since the requirement is managed on Exegol repositories directly, it’s a nice thing to do. See GitHub’s documentation on \fI\%Vigilante mode\fP\&.
.UNINDENT
.UNINDENT
.SS Maintainers
.sp
This part of the documentation is meant for Exegol maintainers. It adds up to the \fI\%contributors\fP documentation.
.INDENT 0.0
.IP \(bu 2
\fI\%Wrapper release\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Preparation\fP
.INDENT 2.0
.IP \(bu 2
\fI\%1. Git updates\fP
.IP \(bu 2
\fI\%2. Config reviews\fP
.UNINDENT
.IP \(bu 2
\fI\%Tests & build\fP
.IP \(bu 2
\fI\%Post build\fP
.IP \(bu 2
\fI\%Manual Upload\fP
.IP \(bu 2
\fI\%Post\-Deploy\fP
.UNINDENT
.IP \(bu 2
\fI\%Images release\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Prepare changes\fP
.IP \(bu 2
\fI\%Merge changes\fP
.IP \(bu 2
\fI\%New tag\fP
.IP \(bu 2
\fI\%Publish release\fP
.UNINDENT
.IP \(bu 2
\fI\%CI/CD Pipeline\fP
.INDENT 2.0
.IP \(bu 2
\fI\%GitHub Actions\fP
.INDENT 2.0
.IP \(bu 2
\fI\%1. Setting up secrets\fP
.IP \(bu 2
\fI\%2. Deploying a runner\fP
.IP \(bu 2
\fI\%3. Checking runners status\fP
.IP \(bu 2
\fI\%4. Understanding the pipelines\fP
.IP \(bu 2
\fI\%4. Common errors\fP
.INDENT 2.0
.IP \(bu 2
\fI\%1. docker login\fP
.IP \(bu 2
\fI\%2. Disk space\fP
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fI\%Pull Requests\fP
.UNINDENT
.SS Wrapper release
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
The wrapper documentation must be aligned with the wrapper features. . The docs PR can be merged once the wrapper is released.
.UNINDENT
.UNINDENT
.SS Preparation
.SS 1. Git updates
.sp
The first step is to update the project and sub\-modules, meaning pointing the exegol\-images and exegol\-resources sub\-modules to the latest master version.
Even if the wrapper is able to auto\-update itself, it is always better to keep the base reference at least up to date.
With git
.sp
With Exegol
.INDENT 0.0
.IP \(bu 2
Update current wrapper repo:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
git pull
.EE
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Update git submodules and checkout to \fBmain\fP branch for release:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
git \-C exegol\-docker\-build checkout main
git \-C exegol\-docker\-build pull
git \-C exegol\-resources checkout main
git \-C exegol\-resources pull
.EE
.UNINDENT
.UNINDENT
Update to the latest version of the \fBmain\fP branches (checkout if needed, \fBexcept for the wrapper\fP which remains in branch dev)
.INDENT 0.0
.INDENT 3.5
.sp
.EX
exegol update \-v
.EE
.UNINDENT
.UNINDENT
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
Don’t forget to \fBreload and commit\fP any \fBsubmodule update\fP at this step !
.UNINDENT
.UNINDENT
.SS 2. Config reviews
.INDENT 0.0
.IP \(bu 2
Review exegol.utils.ConstantConfig variables
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Change version number ! (remove the alpha or beta tag at the end of the version number)
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
Review documentation
.IP \(bu 2
Review README.md
.UNINDENT
.SS Tests & build
.sp
First, test the code with mypy:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
mypy exegol.py \-\-ignore\-missing\-imports \-\-check\-untyped\-defs
.EE
.UNINDENT
.UNINDENT
.sp
You can execute this one\-liner to check the project and build it.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fBRequire\fP \fI\%build\fP package installed!
.UNINDENT
.UNINDENT
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
Exegol can only be published through a \fBsource\fP build distribution because of the source code files for building local images.
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
python3 setup.py clean test && \e
   (rm \-rf Exegol.egg\-info && python3 \-m build \-\-sdist) || \e
   echo \(dqSome tests failed, check your code and requirements before publishing!\(dq
.EE
.UNINDENT
.UNINDENT
.SS Post build
.INDENT 0.0
.IP \(bu 2
Upgrade tests.test_exegol.py version number to the next version build to avoid future mistake
.IP \(bu 2
Commit updates
.IP \(bu 2
Publish PR
.IP \(bu 2
Wait for review and merge
.UNINDENT
.SS Manual Upload
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
PyPi packaging and upload is now handle by \fBGitHub action\fP\&. It will be triggered with the creation of the \fBnew tag\fP in the next\-step with the release creation.
.sp
\fBThis step is no longer needed.\fP
.UNINDENT
.UNINDENT
.sp
After validation of the PR, we can upload the new version package to pypi.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fBRequire\fP \fI\%twine\fP package installed and token configured on \fB~/.pypirc\fP!
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Check package upload on the test repository (optional)
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
python3 \-m twine upload \-\-repository testpypi dist/* \-\-verbose
.EE
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Upload to the production repository
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
python3 \-m twine upload dist/*
.EE
.UNINDENT
.UNINDENT
.SS Post\-Deploy
.INDENT 0.0
.IP \(bu 2
Create new github \fBrelease\fP with \fBnew\fP version tag
.IP \(bu 2
Fast\-forward dev branch to the latest master commit
.IP \(bu 2
Change the wrapper version on the dev branch to \fBx.y.zb1\fP
.UNINDENT
.SS Images release
.sp
\fBHINT:\fP
.INDENT 0.0
.INDENT 3.5
The images documentation must be aligned with the images features. Make sure to add code to the appropriate \fI\%Exegol docs\fP branch and have a pull request ready. The docs PR can be merged once the images are released.
.UNINDENT
.UNINDENT
.SS Prepare changes
.sp
The first step consists in preparing the \fBdev\fP branch for merge.
.INDENT 0.0
.IP 1. 3
create a pull request \fBdev \-> main\fP named \fBRelease X.Y.Z\fP (\fBRelease X.Y.ZbI\fP is also accepted, X, Y, Z and I being numbers. Creating this pull request will trigger the \fBpre\-release\fP workflows. The PR comment must indicate all major changes.
.IP 2. 3
edit the \fBdev\fP branch until the pull requests checks (pipeline) all pass, effectively publishing all images to the preproduction Dockerhub registry
.IP 3. 3
once all checks are good, the PR needs to be approved by a maintainer.
.UNINDENT
.SS Merge changes
.sp
Once the PR is approved and ready for merge, it can be merged
.INDENT 0.0
.IP 1. 3
merge the PR with \fBCreate a merge commit\fP
.IP 2. 3
Synchronize the \fBdev\fP branch with the latest \fBmain\fP update with a \fBfast\-forward merge\fP
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.EX
git checkout main
git pull \-\-all
git checkout dev
git pull \-\-all
git merge \-\-ff\-only main
git push
.EE
.UNINDENT
.UNINDENT
.SS New tag
.sp
The \fBX.Y.Z\fP (or \fBX.Y.ZbI\fP) tag then needs to be placed on the same commit the \fBdev\fP and \fBmain\fP branches point to.
.sp
Optionally, the “Annotated Tag Message” can be set to the PR initial comment with the \fB\-\-file message.txt\fP argument in the \fBgit tag\fP command below.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
git tag \(dqX.Y.Z\(dq
git push origin \-\-tags
.EE
.UNINDENT
.UNINDENT
.sp
Puhing this tag will trigger the \fBrelease\fP workflow. Simply put, the workflow will migrate the images from preprod registry to production registry.
.sp
Maintainers needs to make sure workflow goes as planned and images end up in the prod Dockerhub registry. If the release fails for some reason, the tag can be deleted, changes pushed, and then the tag can be created again to trigger the release again (\fBgit tag \-d \(dqX.Y.Z\(dq && git push \-\-delete origin \(dqX.Y.Z\(dq\fP).
.SS Publish release
.sp
The final step is to create a “release” in github (\fI\%https://github.com/ThePorgs/Exegol\-images/releases/new\fP).
.INDENT 0.0
.IP 1. 3
The release must point to the tag created before.
.IP 2. 3
The release must be named \fBExegol images X.Y.Z\fP\&.
.IP 3. 3
The release notes can be created with the \fBGenerate releases notes\fP button.
.IP 4. 3
Set it as \fBlatest release\fP\&.
.IP 5. 3
Publish
.UNINDENT
.SS CI/CD Pipeline
.sp
The Exegol project relies on a continuous integration and continuous deployment (CI/CD) pipeline for multiple scenarios. At the time of writing, Tue 31 Jan 2023, the pipeline is structured as follows:
wrapper
.sp
images
.sp
resources
.sp
docs
The GitHub Actions platform is used on \fI\%the Exegol module\fP\&. Its workflows are used for internal and external pull requests, new releases and testing on every commit. The workflows build, and push Python packages on \fI\%the official PyPI registry\fP, and run tests to make sure everything works as it should.
The GitHub Actions platform is used on \fI\%the Exegol\-images submodule\fP\&. Its workflows run for internal and external pull requests, new commits, new tags, and allow to:
.INDENT 0.0
.IP \(bu 2
build AMD64 and ARM64 images on self\-hosted runners
.IP \(bu 2
run tests to make sure the tools are installed properly
.IP \(bu 2
automatically export tools list to the documentation
.IP \(bu 2
push the images on \fI\%the official Dockerhub registry\fP
.UNINDENT
[image: Pipelines (GitHub)]
[image]
The GitHub Actions platform is used on \fI\%the Exegol\-resources submodule\fP\&. Its workflows are used to automatically update the resources (monthly) and automatically export the list of resources to the documentation.
The GitHub Actions platform is used for the documentation you’re reading. Its workflows are used to build on every commit and pull request to make sure everything works as it should, but also automatically merge changes between the various branches in order to help with development.
.sp
ReadTheDocs then builds the final version on every commit for multiple branches (main, dev, dev\-images, dev\-wrapper) and hosts it online at \fI\%https://exegol.readthedocs.io/\fP\&.
.SS GitHub Actions
.sp
The GitHub Actions pipeline(s) need runners to operate the various jobs configured for each workflow. The Exegol project relies on self\-hosted runners instead of the GitHub\-hosted runners mainly for costing reasons.
.sp
At the time of writing, Tue 31 Jan 2023, the Exegol\-images pipeline(s) require ARM64 and AMD64 runners in order to build, and run corresponding architectured images.
.SS 1. Setting up secrets
.sp
There are some operations that the runner will operate that will require authentication, including:
\- pushing Python packages on PyPI
\- pushing Docker images on Dockerhub
.sp
In order to allow this, GitHub Actions can be set up with secrets that the runner will be able to use later on. This part of the documentation shows what secrets must be set up and how.
PyPI
.sp
Dockerhub
API Tokens can be created in the maintainer account’s \fI\%PyPI account settings\fP, in the \fBAPI Tokens\fP part. The scope must be set to \fBProject: Exegol\fP\&. The tokens are linked to the personal PyPI account.
Access Tokens can be created in the maintainer account’s \fI\%Dockerhub security settings\fP\&. Permissions must be set to \fBRead, Write, Delete\fP\&. The tokens are linked to the personal Dockerhub account.
.sp
Once the token is created, it can be added as follows:
.INDENT 0.0
.IP \(bu 2
For Exegol\-images, go to the \fI\%Exegol\-images repo settings > secrets > actions\fP\&. At the time of writing, 11 Feb. 2023, Dockerhub secrets are named \fBDOCKER_USERNAME\fP and \fBDOCKER_PASSWORD\fP in the workflows.
.IP \(bu 2
For the Python wrapper, go to the \fI\%Exegol repo settings > secrets > actions\fP\&. At the time of writing, 11 Feb. 2023, the PyPI token is named \fBPYPI_API_TOKEN\fP in the workflows.
.UNINDENT
.SS 2. Deploying a runner
.sp
The runner can either run on macOS, Linux, or Windows, as those three operating systems are supporting by the GHA (GitHub Action) platform. x64 and ARM64 are supported for macOS and Windows, and for Linux, ARM is supported as well.
.sp
Below are the hardware requirements for each runner:
.INDENT 0.0
.IP \(bu 2
enough RAM \fI(to be defined)\fP
.IP \(bu 2
enough CPU \fI(to be defined)\fP
.IP \(bu 2
enough free disk space (at least ~100GB, bare minimum)
.UNINDENT
.sp
Before deploying a GHA agent on a runner, software requirements must be met:
.INDENT 0.0
.IP \(bu 2
Docker (or Docker Desktop for Windows and macOS)
.IP \(bu 2
jq (lightweight and flexible command\-line JSON processor)
.UNINDENT
Linux
.sp
macOS
For Linux systems, Docker is required in order to have the GitHub Actions agent running.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
Docker can be installed quickly and easily with the following command\-line:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
curl \-fsSL \(dqhttps://get.docker.com/\(dq \-o get\-docker.sh
sh get\-docker.sh
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
To run exegol from the user environment without \fBsudo\fP, the user must have privileged rights equivalent to root.
To grant yourself these rights, you can use the following command
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# add the sudo group to the user
sudo usermod \-aG docker $(id \-u \-n)

# \(dqreload\(dq the user groups
newgrp
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The \fBjq\fP utility is also required and can be installed with the following command line:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
apt install jq
.EE
.UNINDENT
.UNINDENT
.sp
Once the requirements are met, the agent can be deployed as follows (with sufficient permissions in the GitHub repository):
.INDENT 0.0
.IP \(bu 2
go to \fI\%https://github.com/ThePorgs/Exegol\-images/settings/actions/runners\fP
.IP \(bu 2
click on “New self\-hosted runner”
.IP \(bu 2
select \fBLinux\fP as operating system, as well as the right architecture and follow the instructions
.IP \(bu 2
when running the \fBconfig.sh\fP script, the following settings must be set
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
name of the runner group: Default
.IP \(bu 2
name of the runner: \fIup to you\fP
.IP \(bu 2
additional labels: \fBbuilder,tester\fP (adapt this if the runner is to be used for only one of those actions). If the runner is an X64/AMD64, the \fBAMD64\fP tag needs to be set as well. If the runner is ARM64, the right tag will be set automatically.
.IP \(bu 2
name of work folder: \fIup to you\fP
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
start the runner with the \fBrun.sh\fP script
.IP \(bu 2
(option) configure the agent as a service if it is to be run unattended/headless with \fBsudo ./svc.sh install <user>\fP, more info at \fI\%https://docs.github.com/en/actions/hosting\-your\-own\-runners/configuring\-the\-self\-hosted\-runner\-application\-as\-a\-service\fP
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When configuring the agent as a service, it will be enabled, meaning it will start at boot. The \fBsystemctl is\-enabled\fP command should return \fBenabled\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
sudo systemctl is\-enabled actions.runner.ThePorgs\-Exegol\-images.<runner\-name>.service
.EE
.UNINDENT
.UNINDENT
.sp
In order to start the service, either reboot the runner, or use \fBsystemctl\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
sudo systemctl start actions.runner.ThePorgs\-Exegol\-images.<runner\-name>.service
.EE
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
[image: Created a new runner]
[image]
[image: Configuring the runner (GitHub)]
[image]
[image: Configuring the runner (Local)]
[image]
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Screenshots annotated with \fI\%https://annotely.com/\fP
.UNINDENT
.UNINDENT
For macOS, \fBDocker Desktop\fP must be installed: \fI\%https://docs.docker.com/desktop/install/mac\-install/\fP\&.
.INDENT 0.0
.IP \(bu 2
In \fBSettings > Resources > Advanced\fP, the \fBvirtual disk limit\fP must be set to at least 100GB.
.IP \(bu 2
In \fBSettings > Resources > Advanced\fP, allocate enough CPUs, Memory and Swap.
.UNINDENT
.sp
The \fBjq\fP tool can be installed as follows.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# install brew
ruby \-e \(dq$(curl \-fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\(dq < /dev/null 2> /dev/null

# install jq
brew install jq
.EE
.UNINDENT
.UNINDENT
.sp
\fBXcode Command Line Tools\fP are also required, and they can be installed with the following command line.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
xcode\-select \-\-install
.EE
.UNINDENT
.UNINDENT
.sp
Once the requirements are met, the agent can be deployed as follows (with sufficient permissions in the GitHub repository):
.INDENT 0.0
.IP \(bu 2
go to \fI\%https://github.com/ThePorgs/Exegol\-images/settings/actions/runners\fP
.IP \(bu 2
click on “New self\-hosted runner”
.IP \(bu 2
select \fBmacOS\fP as operating system, as well as the right architecture and follow the instructions
.IP \(bu 2
when running the \fBconfig.sh\fP script, the following settings must be set
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
name of the runner group: Default
.IP \(bu 2
name of the runner: \fIup to you\fP
.IP \(bu 2
additional labels: \fBbuilder,tester\fP (adapt this if the runner is to be used for only one of those actions). If the runner is an X64/AMD64, the \fBAMD64\fP tag needs to be set as well. If the runner is ARM64, the right tag will be set automatically.
.IP \(bu 2
name of work folder: \fIup to you\fP
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
start the runner with the \fBrun.sh\fP script
.IP \(bu 2
the agent must \fBnot\fP be configured as a service with \fB\&./svc.sh install\fP\&. Some errors have been raised when setting up the pipeline like this.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fBTODO\fP : how to make that service run at boot unattended without using svc.sh install?
.UNINDENT
.UNINDENT
.SS 3. Checking runners status
.sp
Go to \fI\%https://github.com/ThePorgs/Exegol\-images/settings/actions/runners\fP
.SS 4. Understanding the pipelines
.sp
\fBTODO\fP explain the pipelines, include diagrams.
.SS 4. Common errors
.SS 1. docker login
.sp
When configuring a macOS agent as a service with \fB\&./svc.sh install\fP, the following error was met during workflow run.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
Run docker/login\-action@v2
with:
    username: ***
    password: ***
    ecr: auto
    logout: true
Logging into Docker Hub...
Error: Error saving credentials: error storing credentials \- err: exit status 1, out: \(gaerror storing credentials \- err: exit status 1, out: \(gaUser interaction is not allowed.\(ga\(ga
.EE
.UNINDENT
.UNINDENT
.sp
In order to avoid that error, the runner was started interactively with \fB\&./run.sh\fP\&.
.SS 2. Disk space
.sp
When there’s not enough disk space, the following error is usually raised by the pipelines.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
You are running out of disk space. The runner will stop working when the machine runs out of disk space. Free space left: 62 MB
.EE
.UNINDENT
.UNINDENT
.SS Pull Requests
.sp
When handling pull requests, maintainers may need to \fI\%synchronize a contributor’s fork with latests changes\fP\&. In command\-line, this can be achieved as follows.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
git clone \(dqgit@github.com:USER/FORK\(dq \(dqdest_dir\(dq
cd dest_dir
git remote add upstream \(dqgit@github.com:ThePorgs/REPO\(dq
git fetch upstream
git checkout \(dqTARGET_FORK_BRANCH\(dq
git merge \-\-no\-edit upstream/\(dqORIGIN_BRANCH\(dq
# solve conflicts if any
git push
.EE
.UNINDENT
.UNINDENT
.SS Sponsors
[image: Capgemini logo]
[image]
.nf

.fi
.sp
.sp
Dramelac and I work at \fBCapgemini\fP and we thank them for allocating some time for us to develop and maintain Exegol! Visit Capgemini website at \fI\%https://www.capgemini.com/\fP\&.
.nf

.fi
.sp
[image: HackTheBox logo]
[image]
.nf

.fi
.sp
.sp
We thank \fBHackTheBox\fP for continuously supporting the community and for helping us financially to acquire the necessary hardware for supporting multiple architectures (AMD64, ARM64). Show some love at \fI\%https://www.hackthebox.com/\fP !
[image: JetBrains logo]
[image]
.nf

.fi
.sp
.sp
We thank \fBJetBrains\fP for supporting this community project through its OpenSource support program. More information at \fI\%https://jb.gg/OpenSourceSupport\fP !
.SH AUTHOR
Shutdown & Dramelac
.SH COPYRIGHT
2023, Shutdown & Dramelac
.\" Generated by docutils manpage writer.
.
